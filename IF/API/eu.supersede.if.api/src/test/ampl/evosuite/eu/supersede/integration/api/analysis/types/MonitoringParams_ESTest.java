/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:10:09 GMT 2019
 */

package eu.supersede.integration.api.analysis.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.analysis.types.MonitoringParams;
import java.util.List;

public class MonitoringParams_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setKafkaTopic("");
      String string0 = monitoringParams0.getKafkaTopic();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      String string0 = monitoringParams0.getTimeSlot();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setTimeSlot("");
      String string0 = monitoringParams0.getTimeSlot();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setKeywordExpression("");
      String string0 = monitoringParams0.getKeywordExpression();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      String string0 = monitoringParams0.getKeywordExpression();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      String string0 = monitoringParams0.getKafkaEndpoint();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      String string0 = monitoringParams0.getToolName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      String string0 = monitoringParams0.getKafkaTopic();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      List<String> list0 = monitoringParams0.getAccounts();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setAccounts((List<String>) null);
      // Undeclared exception!
      try { 
        monitoringParams0.addAcount("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.addAcount("g sS,!iDXH|_G");
      List<String> list0 = monitoringParams0.getAccounts();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setAccounts((List<String>) null);
      List<String> list0 = monitoringParams0.getAccounts();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setKafkaEndpoint("");
      String string0 = monitoringParams0.getKafkaEndpoint();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setKafkaEndpoint("{ztr\"li");
      String string0 = monitoringParams0.getKafkaEndpoint();
      assertEquals("{ztr\"li", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setKafkaTopic("eSsM9fq=`");
      String string0 = monitoringParams0.getKafkaTopic();
      assertEquals("eSsM9fq=`", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setKeywordExpression("`e?%NWP3D");
      String string0 = monitoringParams0.getKeywordExpression();
      assertEquals("`e?%NWP3D", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setTimeSlot("com.google.common.base.CharMatcher$JavaLetterOrDigit");
      String string0 = monitoringParams0.getTimeSlot();
      assertEquals("com.google.common.base.CharMatcher$JavaLetterOrDigit", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setToolName("");
      String string0 = monitoringParams0.getToolName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MonitoringParams monitoringParams0 = new MonitoringParams();
      monitoringParams0.setToolName("V)e??z zy>HH|");
      String string0 = monitoringParams0.getToolName();
      assertEquals("V)e??z zy>HH|", string0);
  }
}
