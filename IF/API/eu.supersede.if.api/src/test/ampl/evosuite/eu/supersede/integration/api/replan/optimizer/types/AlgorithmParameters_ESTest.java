/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:36:35 GMT 2019
 */

package eu.supersede.integration.api.replan.optimizer.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.replan.optimizer.types.AlgorithmParameters;
import eu.supersede.integration.api.replan.optimizer.types.AlgorithmType;

public class AlgorithmParameters_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Integer integer0 = algorithmParameters0.getNumberOfIterations();
      algorithmParameters0.setNumberOfIterations(integer0);
      assertNull(algorithmParameters0.getCrossoverProbability());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Integer integer0 = algorithmParameters0.getPopulationSize();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Double double0 = algorithmParameters0.getRateOfNotRandomSolution();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Double double0 = algorithmParameters0.getCrossoverProbability();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Double double0 = new Double(0.0);
      algorithmParameters0.setCrossoverProbability(double0);
      Double double1 = algorithmParameters0.getCrossoverProbability();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      algorithmParameters0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      AlgorithmType algorithmType0 = AlgorithmType.MOCell;
      algorithmParameters0.setAlgorithmType(algorithmType0);
      AlgorithmType algorithmType1 = algorithmParameters0.getAlgorithmType();
      assertEquals(AlgorithmType.MOCell, algorithmType1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Double double0 = new Double((-1.0));
      algorithmParameters0.setCrossoverProbability(double0);
      Double double1 = algorithmParameters0.getCrossoverProbability();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Double double0 = new Double(1.0);
      algorithmParameters0.setCrossoverProbability(double0);
      Double double1 = algorithmParameters0.getCrossoverProbability();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Integer integer0 = new Integer((-1363));
      algorithmParameters0.setNumberOfIterations(integer0);
      Integer integer1 = algorithmParameters0.getNumberOfIterations();
      assertEquals((-1363), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Integer integer0 = new Integer(3);
      algorithmParameters0.setNumberOfIterations(integer0);
      Integer integer1 = algorithmParameters0.getNumberOfIterations();
      assertEquals(3, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Integer integer0 = new Integer(0);
      algorithmParameters0.setNumberOfIterations(integer0);
      Integer integer1 = algorithmParameters0.getNumberOfIterations();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Integer integer0 = new Integer((-34));
      algorithmParameters0.setPopulationSize(integer0);
      Integer integer1 = algorithmParameters0.getPopulationSize();
      assertEquals((-34), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Integer integer0 = new Integer(3);
      algorithmParameters0.setPopulationSize(integer0);
      Integer integer1 = algorithmParameters0.getPopulationSize();
      assertEquals(3, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Integer integer0 = new Integer(0);
      algorithmParameters0.setPopulationSize(integer0);
      Integer integer1 = algorithmParameters0.getPopulationSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Double double0 = new Double((-904.83897));
      algorithmParameters0.setRateOfNotRandomSolution(double0);
      Double double1 = algorithmParameters0.getRateOfNotRandomSolution();
      assertEquals((-904.83897), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Double double0 = new Double(2120.270096);
      algorithmParameters0.setRateOfNotRandomSolution(double0);
      Double double1 = algorithmParameters0.getRateOfNotRandomSolution();
      assertEquals(2120.270096, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      Double double0 = new Double(0.0);
      algorithmParameters0.setRateOfNotRandomSolution(double0);
      Double double1 = algorithmParameters0.getRateOfNotRandomSolution();
      assertEquals(0.0, (double)double1, 0.01);
  }
}
