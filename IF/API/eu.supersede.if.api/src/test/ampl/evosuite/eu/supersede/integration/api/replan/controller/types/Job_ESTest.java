/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:28:01 GMT 2019
 */

package eu.supersede.integration.api.replan.controller.types;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import eu.supersede.integration.api.replan.controller.types.Feature;
import eu.supersede.integration.api.replan.controller.types.Job;
import eu.supersede.integration.api.replan.controller.types.Resource;
import java.util.Date;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.mock.java.util.MockDate;

public class Job_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = job0.getFeatureId();
      job0.setFeatureId(integer0);
      assertNull(job0.getFeatureId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = new Integer(0);
      job0.setId(integer0);
      Integer integer1 = job0.getId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Job job0 = new Job();
      Feature feature0 = job0.getFeature();
      assertNull(feature0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Job job0 = new Job();
      Resource resource0 = job0.getResource();
      assertNull(resource0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Job job0 = new Job();
      Date date0 = job0.getStartingDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = job0.getResourceId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Job job0 = new Job();
      Date date0 = job0.getEndingDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = job0.getId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Job job0 = new Job();
      Resource resource0 = new Resource();
      job0.setResource(resource0);
      Resource resource1 = job0.getResource();
      assertNull(resource1.getAvailability());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Job job0 = new Job();
      List<Job> list0 = job0.getDependsOn();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Job job0 = new Job();
      Stack<Job> stack0 = new Stack<Job>();
      stack0.add(job0);
      job0.setDependsOn(stack0);
      List<Job> list0 = job0.getDependsOn();
      assertTrue(list0.contains(job0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      Job job0 = new Job();
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1, 0);
      job0.setEndingDate(mockDate0);
      Date date0 = job0.getEndingDate();
      assertEquals("Sun Dec 31 00:01:00 GMT 1899", date0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Job job0 = new Job();
      Feature feature0 = new Feature();
      job0.setFeature(feature0);
      Feature feature1 = job0.getFeature();
      assertNull(feature1.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = new Integer((-12931));
      job0.setFeatureId(integer0);
      Integer integer1 = job0.getFeatureId();
      assertEquals((-12931), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = new Integer(2437);
      job0.setFeatureId(integer0);
      Integer integer1 = job0.getFeatureId();
      assertEquals(2437, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = new Integer(0);
      job0.setFeatureId(integer0);
      Integer integer1 = job0.getFeatureId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = new Integer((-1479));
      job0.setId(integer0);
      Integer integer1 = job0.getId();
      assertEquals((-1479), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = new Integer(1450);
      job0.setId(integer0);
      Integer integer1 = job0.getId();
      assertEquals(1450, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = new Integer((-1111));
      job0.setResourceId(integer0);
      Integer integer1 = job0.getResourceId();
      assertEquals((-1111), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = new Integer(1539);
      job0.setResourceId(integer0);
      Integer integer1 = job0.getResourceId();
      assertEquals(1539, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Job job0 = new Job();
      Integer integer0 = new Integer(0);
      job0.setResourceId(integer0);
      Integer integer1 = job0.getResourceId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      Job job0 = new Job();
      MockDate mockDate0 = new MockDate(64L);
      job0.setStartingDate(mockDate0);
      Date date0 = job0.getStartingDate();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }
}
