/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 09:59:27 GMT 2019
 */

package eu.supersede.integration.api.adaptation.types;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import eu.supersede.integration.api.adaptation.types.AdaptabilityModel;
import eu.supersede.integration.api.adaptation.types.BaseModel;
import eu.supersede.integration.api.adaptation.types.FeatureModel;
import eu.supersede.integration.api.adaptation.types.GenericModel;
import eu.supersede.integration.api.adaptation.types.ModelSystem;
import eu.supersede.integration.api.adaptation.types.ProfileModel;
import eu.supersede.integration.api.adaptation.types.Tenant;
import eu.supersede.integration.api.adaptation.types.TypedModelId;
import eu.supersede.integration.api.adaptation.types.VariantModel;
import java.util.Date;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.mock.java.util.MockDate;

public class GenericModel_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FeatureModel featureModel0 = new FeatureModel();
      String string0 = featureModel0.getRelativePath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FeatureModel featureModel0 = new FeatureModel();
      Stack<TypedModelId> stack0 = new Stack<TypedModelId>();
      featureModel0.setDependencies(stack0);
      TypedModelId typedModelId0 = new TypedModelId();
      stack0.add(typedModelId0);
      List<TypedModelId> list0 = featureModel0.getDependencies();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VariantModel variantModel0 = new VariantModel();
      String string0 = variantModel0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      Date date0 = adaptabilityModel0.getCreationDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      String string0 = adaptabilityModel0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      adaptabilityModel0.getSystemId();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FeatureModel featureModel0 = new FeatureModel();
      List<TypedModelId> list0 = featureModel0.getDependencies();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenericModel genericModel0 = new GenericModel();
      String string0 = genericModel0.getModelContent();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProfileModel profileModel0 = new ProfileModel();
      String string0 = profileModel0.getAuthorId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      String string0 = adaptabilityModel0.getFileExtension();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FeatureModel featureModel0 = new FeatureModel();
      Date date0 = featureModel0.getLastModificationDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      adaptabilityModel0.setModelContent("");
      String string0 = adaptabilityModel0.getModelContent();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      adaptabilityModel0.setAuthorId("");
      String string0 = adaptabilityModel0.getAuthorId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProfileModel profileModel0 = new ProfileModel();
      profileModel0.setAuthorId(" m");
      String string0 = profileModel0.getAuthorId();
      assertEquals(" m", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProfileModel profileModel0 = new ProfileModel();
      MockDate mockDate0 = new MockDate();
      profileModel0.setCreationDate(mockDate0);
      Date date0 = profileModel0.getCreationDate();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenericModel genericModel0 = new GenericModel();
      genericModel0.setDependencies((List<TypedModelId>) null);
      List<TypedModelId> list0 = genericModel0.getDependencies();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VariantModel variantModel0 = new VariantModel();
      variantModel0.setFileExtension("");
      String string0 = variantModel0.getFileExtension();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VariantModel variantModel0 = new VariantModel();
      variantModel0.setFileExtension("2]G6P");
      String string0 = variantModel0.getFileExtension();
      assertEquals("2]G6P", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BaseModel baseModel0 = new BaseModel();
      baseModel0.setId("");
      String string0 = baseModel0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VariantModel variantModel0 = new VariantModel();
      variantModel0.setId("eu.supersede.integration.api.adaptation.types.GenericModel");
      String string0 = variantModel0.getId();
      assertEquals("eu.supersede.integration.api.adaptation.types.GenericModel", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      VariantModel variantModel0 = new VariantModel();
      MockDate mockDate0 = new MockDate(65536, 65536, 65536);
      variantModel0.setLastModificationDate(mockDate0);
      Date date0 = variantModel0.getLastModificationDate();
      assertEquals("Thu Oct 05 00:00:00 GMT 73076", date0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VariantModel variantModel0 = new VariantModel();
      variantModel0.setModelContent("should never be called");
      String string0 = variantModel0.getModelContent();
      assertEquals("should never be called", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      adaptabilityModel0.setName("");
      String string0 = adaptabilityModel0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GenericModel genericModel0 = new GenericModel();
      genericModel0.setName(",(l]$)'B8I3V:4?<");
      String string0 = genericModel0.getName();
      assertEquals(",(l]$)'B8I3V:4?<", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      adaptabilityModel0.setRelativePath("");
      String string0 = adaptabilityModel0.getRelativePath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FeatureModel featureModel0 = new FeatureModel();
      featureModel0.setRelativePath("yF.Q=Z--Wj .SSa[");
      String string0 = featureModel0.getRelativePath();
      assertEquals("yF.Q=Z--Wj .SSa[", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      ModelSystem modelSystem0 = ModelSystem.Siemens_Buildings;
      adaptabilityModel0.setSystemId(modelSystem0);
      ModelSystem modelSystem1 = adaptabilityModel0.getSystemId();
      assertEquals(Tenant.SIEMENS, modelSystem1.getTenant());
  }
}
