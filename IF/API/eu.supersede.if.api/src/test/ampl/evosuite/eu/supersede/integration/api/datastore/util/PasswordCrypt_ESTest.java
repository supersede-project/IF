/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:53:33 GMT 2019
 */

package eu.supersede.integration.api.datastore.util;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.datastore.util.PasswordCrypt;
import java.security.InvalidKeyException;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;

public class PasswordCrypt_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PasswordCrypt.generateKey();
      String string0 = "";
      // Undeclared exception!
      try { 
        PasswordCrypt.decryptPassword("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PasswordCrypt passwordCrypt0 = new PasswordCrypt();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        PasswordCrypt.testDecryptPassword("AES", "CCDE6475D7277CB06567BD9B361B8AE5");
        fail("Expecting exception: IllegalBlockSizeException");
      
      } catch(IllegalBlockSizeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        PasswordCrypt.decryptPassword("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        PasswordCrypt.decryptPassword((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        PasswordCrypt.decryptPassword("=4Lg%/1", "=4Lg%/1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=4\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        PasswordCrypt.decryptPassword("AES", "AES");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        PasswordCrypt.decryptPassword("EFFF68E359C167F4A43712AA2D3BA575", "EFFF68E359C167F4A43712AA2D3BA575");
        fail("Expecting exception: BadPaddingException");
      
      } catch(BadPaddingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        PasswordCrypt.decryptPassword("AES", "AD81E1795AEED2B05CA4326522F9BE52");
        fail("Expecting exception: IllegalBlockSizeException");
      
      } catch(IllegalBlockSizeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        PasswordCrypt.encryptPassword("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        PasswordCrypt.encryptPassword((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        PasswordCrypt.encryptPassword("unC+\u0004U46lCP(Uk", "unC+\u0004U46lCP(Uk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"un\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        PasswordCrypt.encryptPassword("AES", "AES");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        PasswordCrypt.testDecryptPassword("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        PasswordCrypt.testDecryptPassword((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      try { 
        PasswordCrypt.testDecryptPassword("****************  Original Password  ****************", "****************  Original Password  ****************");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"**\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      try { 
        PasswordCrypt.testDecryptPassword("AES", "AES");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      try { 
        PasswordCrypt.testDecryptPassword("6C3B8CC5081FCFE388C9C4D77C6D0E12", "6C3B8CC5081FCFE388C9C4D77C6D0E12");
        fail("Expecting exception: BadPaddingException");
      
      } catch(BadPaddingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = PasswordCrypt.decryptPassword("", "F36822F65D76854FAC3BED5A4397C70C");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = PasswordCrypt.decryptPassword("43AD5C125DC984F3EC7982DCC63579A0BC22E76BF1767C0E93C1832B7F902097E0B185E60ACF902463430673EC11A6BB", "3383AD32839652D74D2A06EA8454B969");
      assertEquals("3383AD32839652D74D2A06EA8454B969", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = PasswordCrypt.testDecryptPassword("", "F36822F65D76854FAC3BED5A4397C70C");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = PasswordCrypt.testDecryptPassword("C84AE14B4CD77EEB6572E32658CA2E98A44DE178A972F2CE03D0B065E3BD760BD15D2FCFC926088F8FA3C3654ADD42BB", "59252AD8D69BAFFDFA46F3939D571F4F");
      assertEquals("59252AD8D69BAFFDFA46F3939D571F4F", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = PasswordCrypt.encryptPassword("SVd[R;&w.<Kt]@nzP9.", "D67A94704AADB35D41F019ADBBCF7EE1");
      assertEquals("796A6F52C5A1A3A4639AB1806C7AB5B0AE54087E3F5EB6B223294A3CFB0DB499", string0);
  }
}
