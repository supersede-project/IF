/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:40:21 GMT 2019
 */

package eu.supersede.integration.api.feedback.orchestrator.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.feedback.orchestrator.types.ApiUserPermission;
import eu.supersede.integration.api.feedback.orchestrator.types.Application;
import eu.supersede.integration.api.feedback.orchestrator.types.Configuration;
import eu.supersede.integration.api.feedback.orchestrator.types.GeneralConfiguration;
import eu.supersede.integration.api.feedback.orchestrator.types.User;
import eu.supersede.integration.api.feedback.orchestrator.types.UserGroup;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.mock.java.util.MockDate;

public class UserGroup_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      Application application0 = userGroup0.getApplication();
      assertNull(application0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      userGroup0.setActive(true);
      boolean boolean0 = userGroup0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      String string0 = userGroup0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      userGroup0.setName("");
      String string0 = userGroup0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      boolean boolean0 = userGroup0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      MockDate mockDate0 = new MockDate((-1076), 133, 0, 1, 0);
      ArrayList<Configuration> arrayList0 = new ArrayList<Configuration>();
      Application application0 = new Application("[eGzU", (-1076), mockDate0, mockDate0, arrayList0);
      userGroup0.setApplication(application0);
      Application application1 = userGroup0.getApplication();
      assertEquals((-1076), application1.getState());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      Stack<User> stack0 = new Stack<User>();
      userGroup0.setUsers(stack0);
      boolean boolean0 = userGroup0.containsUserWithUserIdentification("[eGzU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<UserGroup> stack0 = new Stack<UserGroup>();
      Stack<ApiUserPermission> stack1 = new Stack<ApiUserPermission>();
      MockDate mockDate0 = new MockDate(117);
      GeneralConfiguration generalConfiguration0 = new GeneralConfiguration();
      ArrayList<Configuration> arrayList0 = new ArrayList<Configuration>();
      Vector<User> vector0 = new Vector<User>();
      Application application0 = new Application("t1LMYPUS:", 117, mockDate0, mockDate0, generalConfiguration0, arrayList0, vector0, stack0, stack1);
      UserGroup userGroup0 = new UserGroup("t1LMYPUS:", vector0, application0);
      Application application1 = userGroup0.getApplication();
      assertSame(application0, application1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      boolean boolean0 = userGroup0.containsUserWithUserIdentification("[eGzU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      long long0 = userGroup0.getId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      User user0 = new User();
      user0.setUserIdentification("");
      linkedList0.add(user0);
      userGroup0.setUsers(linkedList0);
      boolean boolean0 = userGroup0.containsUserWithUserIdentification("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      List<User> list0 = userGroup0.getUsers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      Stack<User> stack0 = new Stack<User>();
      User user0 = new User();
      stack0.add(user0);
      userGroup0.setUsers(stack0);
      // Undeclared exception!
      try { 
        userGroup0.containsUserWithUserIdentification("eu.supersede.integration.api.feedback.orchestrator.types.UserGroup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      Application application0 = new Application();
      application0.setId(2005L);
      userGroup0.setApplication(application0);
      Application application1 = userGroup0.getApplication();
      assertEquals(2005L, application1.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<User> linkedList0 = new LinkedList<User>();
      Application application0 = new Application();
      UserGroup userGroup0 = new UserGroup("", linkedList0, application0);
      userGroup0.setId((-2797));
      long long0 = userGroup0.getId();
      assertEquals((-2797L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserGroup userGroup0 = new UserGroup();
      userGroup0.setId(5068L);
      long long0 = userGroup0.getId();
      assertEquals(5068L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<User> arrayList0 = new ArrayList<User>();
      MockDate mockDate0 = new MockDate(1, 0, 1682554634);
      Vector<Configuration> vector0 = new Vector<Configuration>();
      Application application0 = new Application("", 0, mockDate0, mockDate0, vector0);
      UserGroup userGroup0 = new UserGroup("KYD", arrayList0, application0);
      String string0 = userGroup0.getName();
      assertEquals("KYD", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<User> arrayList0 = new ArrayList<User>();
      MockDate mockDate0 = new MockDate(1, 0, 1682554634);
      Vector<Configuration> vector0 = new Vector<Configuration>();
      Application application0 = new Application("", 0, mockDate0, mockDate0, vector0);
      UserGroup userGroup0 = new UserGroup("KYD", arrayList0, application0);
      User user0 = new User("", "", application0, userGroup0);
      arrayList0.add(user0);
      List<User> list0 = userGroup0.getUsers();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<User> vector0 = new Vector<User>();
      MockDate mockDate0 = new MockDate(0, 0, (-1384), 0, 0, (-1367));
      GeneralConfiguration generalConfiguration0 = new GeneralConfiguration();
      Stack<Configuration> stack0 = new Stack<Configuration>();
      Application application0 = new Application("&LbfNS~J", 0, mockDate0, mockDate0, generalConfiguration0, stack0, vector0);
      UserGroup userGroup0 = new UserGroup(":M:~751U(BxvOxFs", vector0, application0);
      List<User> list0 = userGroup0.getUsers();
      assertTrue(list0.isEmpty());
  }
}
