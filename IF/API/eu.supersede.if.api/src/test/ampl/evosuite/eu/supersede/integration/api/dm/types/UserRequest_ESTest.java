/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:18:37 GMT 2019
 */

package eu.supersede.integration.api.dm.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.dm.types.RequestClassification;
import eu.supersede.integration.api.dm.types.UserRequest;

public class UserRequest_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      String string0 = userRequest0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      userRequest0.setPositiveSentiment(2437);
      assertEquals(2437, userRequest0.getPositiveSentiment());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      String[] stringArray0 = new String[0];
      userRequest0.setFeedbackIDs(stringArray0);
      String[] stringArray1 = userRequest0.getFeedbackIDs();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      String[] stringArray0 = new String[2];
      userRequest0.setFeatures(stringArray0);
      assertEquals(0, userRequest0.getNegativeSentiment());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      RequestClassification requestClassification0 = RequestClassification.BugFixRequest;
      userRequest0.setClassification(requestClassification0);
      assertNull(userRequest0.getDescription());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      userRequest0.setOverallSentiment((-1));
      int int0 = userRequest0.getOverallSentiment();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.BugFixRequest;
      String[] stringArray0 = new String[3];
      UserRequest userRequest0 = new UserRequest("j '|!\",/1L'g'M.[WQ", requestClassification0, 724.44606635711, "", 0, 0, 1043, stringArray0, stringArray0);
      int int0 = userRequest0.getNegativeSentiment();
      assertEquals(0, int0);
      assertEquals("", userRequest0.getDescription());
      assertEquals(0, userRequest0.getPositiveSentiment());
      assertEquals(1043, userRequest0.getOverallSentiment());
      assertEquals(724.44606635711, userRequest0.getAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      double double0 = userRequest0.getAccuracy();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      int int0 = userRequest0.getOverallSentiment();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      String string0 = userRequest0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      userRequest0.setDescription("");
      assertEquals(0.0, userRequest0.getAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      String[] stringArray0 = userRequest0.getFeedbackIDs();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      userRequest0.getClassification();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      int int0 = userRequest0.getPositiveSentiment();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      userRequest0.setNegativeSentiment((-4315));
      assertEquals((-4315), userRequest0.getNegativeSentiment());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.Other;
      String[] stringArray0 = new String[1];
      UserRequest userRequest0 = new UserRequest((String) null, requestClassification0, (-3200.465), (String) null, (-2537), (-1), 0, stringArray0, stringArray0);
      double double0 = userRequest0.getAccuracy();
      assertEquals((-1), userRequest0.getNegativeSentiment());
      assertEquals((-3200.465), double0, 0.01);
      assertEquals((-2537), userRequest0.getPositiveSentiment());
      assertEquals(0, userRequest0.getOverallSentiment());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.FeatureRequest;
      String[] stringArray0 = new String[7];
      UserRequest userRequest0 = new UserRequest("$VALUES", requestClassification0, (-1101.30404331371), "$VALUES", (-2103), 0, 0, stringArray0, stringArray0);
      userRequest0.accuracy = 1286.4285;
      double double0 = userRequest0.getAccuracy();
      assertEquals(1286.4285, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.FeatureRequest;
      String[] stringArray0 = new String[7];
      UserRequest userRequest0 = new UserRequest("$VALUES", requestClassification0, (-1101.30404331371), "$VALUES", (-2103), 0, 0, stringArray0, stringArray0);
      userRequest0.getClassification();
      assertEquals((-2103), userRequest0.getPositiveSentiment());
      assertEquals((-1101.30404331371), userRequest0.getAccuracy(), 0.01);
      assertEquals(0, userRequest0.getOverallSentiment());
      assertEquals(0, userRequest0.getNegativeSentiment());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.Other;
      String[] stringArray0 = new String[0];
      UserRequest userRequest0 = new UserRequest("", requestClassification0, 1.0, "", 0, 0, 0, stringArray0, stringArray0);
      String string0 = userRequest0.getDescription();
      assertEquals(0, userRequest0.getOverallSentiment());
      assertNotNull(string0);
      assertEquals(0, userRequest0.getNegativeSentiment());
      assertEquals(1.0, userRequest0.getAccuracy(), 0.01);
      assertEquals(0, userRequest0.getPositiveSentiment());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.Other;
      String[] stringArray0 = new String[0];
      UserRequest userRequest0 = new UserRequest("/8gK-3`F", requestClassification0, (-1011.2296607232639), "L>6eNoF}4M|rS.", 0, (-905), 0, stringArray0, stringArray0);
      String string0 = userRequest0.getDescription();
      assertEquals(0, userRequest0.getPositiveSentiment());
      assertEquals((-1011.2296607232639), userRequest0.getAccuracy(), 0.01);
      assertEquals(0, userRequest0.getOverallSentiment());
      assertEquals((-905), userRequest0.getNegativeSentiment());
      assertEquals("L>6eNoF}4M|rS.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.Other;
      String[] stringArray0 = new String[0];
      UserRequest userRequest0 = new UserRequest("", requestClassification0, 1.0, "", 0, 0, 0, stringArray0, stringArray0);
      String[] stringArray1 = userRequest0.getFeatures();
      assertEquals(0, userRequest0.getOverallSentiment());
      assertEquals(1.0, userRequest0.getAccuracy(), 0.01);
      assertEquals(0, userRequest0.getNegativeSentiment());
      assertEquals(0, userRequest0.getPositiveSentiment());
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.BugFixRequest;
      String[] stringArray0 = new String[7];
      UserRequest userRequest0 = new UserRequest((String) null, requestClassification0, 645.305017, (String) null, 0, 0, 0, stringArray0, stringArray0);
      String[] stringArray1 = userRequest0.getFeatures();
      assertNotNull(stringArray1);
      assertEquals(0, userRequest0.getPositiveSentiment());
      assertEquals(645.305017, userRequest0.getAccuracy(), 0.01);
      assertEquals(0, userRequest0.getOverallSentiment());
      assertEquals(0, userRequest0.getNegativeSentiment());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      String[] stringArray0 = new String[2];
      userRequest0.setFeedbackIDs(stringArray0);
      String[] stringArray1 = userRequest0.getFeedbackIDs();
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      userRequest0.setId("");
      String string0 = userRequest0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.Other;
      String[] stringArray0 = new String[0];
      UserRequest userRequest0 = new UserRequest("/8gK-3`F", requestClassification0, (-1011.2296607232639), "L>6eNoF}4M|rS.", 0, (-905), 0, stringArray0, stringArray0);
      String string0 = userRequest0.getId();
      assertEquals(0, userRequest0.getPositiveSentiment());
      assertEquals((-905), userRequest0.getNegativeSentiment());
      assertEquals(0, userRequest0.getOverallSentiment());
      assertEquals((-1011.2296607232639), userRequest0.getAccuracy(), 0.01);
      assertNotNull(string0);
      assertEquals("/8gK-3`F", string0);
      assertEquals("L>6eNoF}4M|rS.", userRequest0.getDescription());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.EnhancementRequest;
      String[] stringArray0 = new String[0];
      UserRequest userRequest0 = new UserRequest((String) null, requestClassification0, (-1.0), (String) null, 1, (-1), 4, (String[]) null, stringArray0);
      int int0 = userRequest0.getNegativeSentiment();
      assertEquals((-1), int0);
      assertEquals(1, userRequest0.getPositiveSentiment());
      assertEquals(4, userRequest0.getOverallSentiment());
      assertEquals((-1.0), userRequest0.getAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.FeatureRequest;
      String[] stringArray0 = new String[4];
      UserRequest userRequest0 = new UserRequest("", requestClassification0, (-3387.370444768), "/{/[# 7", 1, 0, (-667), stringArray0, stringArray0);
      assertEquals(0, userRequest0.getNegativeSentiment());
      
      userRequest0.negativeSentiment = 1;
      int int0 = userRequest0.getNegativeSentiment();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      userRequest0.setOverallSentiment(3120);
      int int0 = userRequest0.getOverallSentiment();
      assertEquals(3120, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.Other;
      String[] stringArray0 = new String[1];
      UserRequest userRequest0 = new UserRequest((String) null, requestClassification0, (-3200.465), (String) null, (-2537), (-1), 0, stringArray0, stringArray0);
      int int0 = userRequest0.getPositiveSentiment();
      assertEquals((-3200.465), userRequest0.getAccuracy(), 0.01);
      assertEquals((-2537), int0);
      assertEquals((-1), userRequest0.getNegativeSentiment());
      assertEquals(0, userRequest0.getOverallSentiment());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RequestClassification requestClassification0 = RequestClassification.FeatureRequest;
      String[] stringArray0 = new String[4];
      UserRequest userRequest0 = new UserRequest("", requestClassification0, (-3387.370444768), "/{/[# 7", 1, 0, (-667), stringArray0, stringArray0);
      int int0 = userRequest0.getPositiveSentiment();
      assertEquals(0, userRequest0.getNegativeSentiment());
      assertEquals(1, int0);
      assertEquals((-667), userRequest0.getOverallSentiment());
      assertEquals("/{/[# 7", userRequest0.getDescription());
      assertEquals((-3387.370444768), userRequest0.getAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      userRequest0.setAccuracy(1194.042581407);
      assertEquals(1194.042581407, userRequest0.getAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UserRequest userRequest0 = new UserRequest();
      String[] stringArray0 = new String[0];
      userRequest0.setFeedbackIDs(stringArray0);
      String[] stringArray1 = userRequest0.getFeatures();
      assertNull(stringArray1);
  }
}
