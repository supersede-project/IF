/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:51:01 GMT 2019
 */

package eu.supersede.integration.api.security.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.security.types.Role;
import eu.supersede.integration.api.security.types.User;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;
import org.wso2.carbon.user.core.Permission;

public class Role_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        Role.roles(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Role role0 = new Role();
      Set<User> set0 = role0.getUsers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Role role0 = new Role();
      Set<Permission> set0 = role0.getPermissions();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "com.google.common.collect.DiscreteDomain$LongDomain";
      Set<Role> set0 = Role.roles(stringArray0);
      String[] stringArray1 = Role.roleNames(set0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Internal/everyone";
      Set<Role> set0 = Role.roles(stringArray0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Role role0 = new Role();
      TreeSet<Role> treeSet0 = new TreeSet<Role>();
      boolean boolean0 = role0.equals(treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Role role0 = new Role();
      role0.setRoleName("");
      boolean boolean0 = role0.equals(role0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.getRoleName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Role role0 = new Role();
      // Undeclared exception!
      try { 
        role0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Role role0 = new Role();
      // Undeclared exception!
      try { 
        role0.equals(role0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Role.roleNames((Set<Role>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Role role0 = new Role();
      TreeSet<Permission> treeSet0 = new TreeSet<Permission>();
      role0.permissions = (Set<Permission>) treeSet0;
      Permission[] permissionArray0 = new Permission[1];
      Permission permission0 = new Permission("eu.supersede.integration.api.security.types.Role", "eu.supersede.integration.api.security.types.Role");
      permissionArray0[0] = permission0;
      // Undeclared exception!
      try { 
        role0.setPermissions(permissionArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.wso2.carbon.user.core.Permission cannot be cast to java.lang.Comparable
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Role role0 = new Role();
      // Undeclared exception!
      try { 
        role0.setPermissions((Permission[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Role role0 = new Role();
      Permission[] permissionArray0 = new Permission[9];
      role0.setPermissions(permissionArray0);
      Set<Permission> set0 = role0.getPermissions();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Role role0 = new Role();
      role0.setPermissions((Set<Permission>) null);
      Set<Permission> set0 = role0.getPermissions();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Role role0 = new Role();
      role0.setRoleName("");
      String string0 = role0.getRoleName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Role role0 = new Role();
      role0.setRoleName("u6l=.4&yGi-<_");
      String string0 = role0.getRoleName();
      assertEquals("u6l=.4&yGi-<_", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Role role0 = new Role();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "com.google.common.collect.DiscreteDomain$LongDomain";
      Set<User> set0 = User.users(stringArray0);
      role0.users = set0;
      Set<User> set1 = role0.getUsers();
      assertFalse(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Role role0 = new Role();
      role0.setUsers((Set<User>) null);
      Set<User> set0 = role0.getUsers();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashSet<Role> hashSet0 = new HashSet<Role>();
      String[] stringArray0 = Role.roleNames(hashSet0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Role role0 = new Role();
      role0.setRoleName("g,Bz%i");
      role0.hashCode();
  }
}
