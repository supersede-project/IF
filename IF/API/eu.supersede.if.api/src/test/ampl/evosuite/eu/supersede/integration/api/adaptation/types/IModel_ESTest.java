/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:00:39 GMT 2019
 */

package eu.supersede.integration.api.adaptation.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.adaptation.types.AdaptabilityModel;
import eu.supersede.integration.api.adaptation.types.FeatureConfiguration;
import eu.supersede.integration.api.adaptation.types.FeatureModel;
import eu.supersede.integration.api.adaptation.types.GenericModel;
import eu.supersede.integration.api.adaptation.types.IModel;
import eu.supersede.integration.api.adaptation.types.PatternModel;
import eu.supersede.integration.api.adaptation.types.VariantModel;
import java.lang.reflect.Field;
import java.util.List;
import org.evosuite.runtime.mock.java.util.MockDate;

public class IModel_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FeatureModel featureModel0 = new FeatureModel();
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      MockDate mockDate0 = new MockDate((-874), (-874), (-874));
      adaptabilityModel0.setLastModificationDate(mockDate0);
      int int0 = featureModel0.compareTo((IModel) adaptabilityModel0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      GenericModel genericModel0 = new GenericModel();
      MockDate mockDate0 = new MockDate();
      genericModel0.setCreationDate(mockDate0);
      int int0 = adaptabilityModel0.compareTo((IModel) genericModel0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      adaptabilityModel0.setId("5");
      int int0 = adaptabilityModel0.compareTo((IModel) adaptabilityModel0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      adaptabilityModel0.setId("'");
      AdaptabilityModel adaptabilityModel1 = new AdaptabilityModel();
      int int0 = adaptabilityModel1.compareTo((IModel) adaptabilityModel0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      Object object0 = adaptabilityModel0.getValue("id");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      try { 
        adaptabilityModel0.getValue("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // This type of model does not have a  field
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FeatureModel featureModel0 = new FeatureModel();
      try { 
        featureModel0.getValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      try { 
        adaptabilityModel0.setValue("This type of model does not have a ", "This type of model does not have a ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // This type of model does not have a This type of model does not have a  field
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      List<Field> list0 = adaptabilityModel0.getFields();
      try { 
        adaptabilityModel0.setValue("id", list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      List<Field> list0 = adaptabilityModel0.getFields();
      try { 
        adaptabilityModel0.setValue((String) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PatternModel patternModel0 = new PatternModel();
      MockDate mockDate0 = new MockDate(1744L);
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      mockDate0.setTime(1);
      patternModel0.setCreationDate(mockDate0);
      FeatureConfiguration featureConfiguration0 = new FeatureConfiguration();
      featureConfiguration0.setCreationDate(mockDate1);
      int int0 = featureConfiguration0.compareTo((IModel) patternModel0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VariantModel variantModel0 = new VariantModel();
      MockDate mockDate0 = new MockDate(2647, 2647, 2647, 10, 2647, 5);
      MockDate mockDate1 = new MockDate();
      variantModel0.setLastModificationDate(mockDate0);
      FeatureConfiguration featureConfiguration0 = new FeatureConfiguration();
      featureConfiguration0.setLastModificationDate(mockDate1);
      int int0 = featureConfiguration0.compareTo((IModel) variantModel0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      adaptabilityModel0.setId("id");
      Object object0 = adaptabilityModel0.getValue("id");
      assertEquals("id", object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      int int0 = adaptabilityModel0.compareTo((IModel) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenericModel genericModel0 = new GenericModel();
      genericModel0.setValue("id", "id");
      assertNull(genericModel0.getAuthorId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdaptabilityModel adaptabilityModel0 = new AdaptabilityModel();
      adaptabilityModel0.setId(" field");
      AdaptabilityModel adaptabilityModel1 = new AdaptabilityModel();
      adaptabilityModel1.setId("");
      int int0 = adaptabilityModel1.compareTo((IModel) adaptabilityModel0);
      assertEquals(0, int0);
  }
}
