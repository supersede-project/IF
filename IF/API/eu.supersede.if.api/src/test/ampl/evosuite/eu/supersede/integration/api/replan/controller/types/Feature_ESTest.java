/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:23:19 GMT 2019
 */

package eu.supersede.integration.api.replan.controller.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.replan.controller.types.Feature;
import eu.supersede.integration.api.replan.controller.types.Skill;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.mock.java.time.MockInstant;

public class Feature_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Feature feature0 = new Feature();
      Date date0 = feature0.getDeadline();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Feature feature0 = new Feature();
      Double double0 = feature0.getEffort();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = feature0.getCode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = feature0.getPriority();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = feature0.getReleaseId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Feature feature0 = new Feature();
      feature0.setRequiredSkills((List<Skill>) null);
      List<Skill> list0 = feature0.getRequiredSkills();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Feature feature0 = new Feature();
      feature0.setDependencies((List<Feature>) null);
      List<Feature> list0 = feature0.getDependencies();
      assertFalse(list0.contains(feature0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = new Integer((-1));
      feature0.setCode(integer0);
      Integer integer1 = feature0.getCode();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = new Integer(551);
      feature0.setCode(integer0);
      Integer integer1 = feature0.getCode();
      assertEquals(551, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = new Integer(0);
      feature0.setCode(integer0);
      Integer integer1 = feature0.getCode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Feature feature0 = new Feature();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      feature0.setDeadline(date0);
      Date date1 = feature0.getDeadline();
      assertSame(date1, date0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Feature feature0 = new Feature();
      Vector<Feature> vector0 = new Vector<Feature>();
      vector0.add(feature0);
      feature0.setDependencies(vector0);
      List<Feature> list0 = feature0.getDependencies();
      assertTrue(list0.contains(feature0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Feature feature0 = new Feature();
      Double double0 = new Double((-3749.3923));
      feature0.setEffort(double0);
      Double double1 = feature0.getEffort();
      assertEquals((-3749.3923), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Feature feature0 = new Feature();
      Double double0 = new Double(1);
      feature0.setEffort(double0);
      Double double1 = feature0.getEffort();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Feature feature0 = new Feature();
      Double double0 = new Double(0);
      feature0.setEffort(double0);
      Double double1 = feature0.getEffort();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = new Integer((-1));
      feature0.setPriority(integer0);
      Integer integer1 = feature0.getPriority();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = new Integer(5);
      feature0.setPriority(integer0);
      Integer integer1 = feature0.getPriority();
      assertEquals(5, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = new Integer(0);
      feature0.setPriority(integer0);
      Integer integer1 = feature0.getPriority();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = new Integer((-1903));
      feature0.setReleaseId(integer0);
      Integer integer1 = feature0.getReleaseId();
      assertEquals((-1903), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = new Integer(551);
      feature0.setReleaseId(integer0);
      Integer integer1 = feature0.getReleaseId();
      assertEquals(551, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Feature feature0 = new Feature();
      Integer integer0 = new Integer(0);
      feature0.setReleaseId(integer0);
      Integer integer1 = feature0.getReleaseId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Feature feature0 = new Feature();
      Vector<Skill> vector0 = new Vector<Skill>();
      Skill skill0 = new Skill();
      vector0.add(skill0);
      feature0.setRequiredSkills(vector0);
      List<Skill> list0 = feature0.getRequiredSkills();
      assertTrue(list0.contains(skill0));
  }
}
