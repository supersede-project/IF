/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:46:43 GMT 2019
 */

package eu.supersede.integration.api.replan.optimizer_v2.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.replan.optimizer_v2.types.AlgorithmParameters;
import eu.supersede.integration.api.replan.optimizer_v2.types.Feature;
import eu.supersede.integration.api.replan.optimizer_v2.types.NextReleaseProblem;
import eu.supersede.integration.api.replan.optimizer_v2.types.PlanningSolution;
import eu.supersede.integration.api.replan.optimizer_v2.types.Resource;
import java.util.List;
import java.util.Stack;
import java.util.Vector;

public class NextReleaseProblem_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      AlgorithmParameters algorithmParameters0 = nextReleaseProblem0.getAlgorithmParameters();
      assertNull(algorithmParameters0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      Double double0 = nextReleaseProblem0.getHoursPerWeek();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      Integer integer0 = new Integer(0);
      nextReleaseProblem0.setNbWeeks(integer0);
      Integer integer1 = nextReleaseProblem0.getNbWeeks();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      PlanningSolution planningSolution0 = nextReleaseProblem0.getCurrentPlan();
      assertNull(planningSolution0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      Integer integer0 = nextReleaseProblem0.getNbWeeks();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      List<Resource> list0 = nextReleaseProblem0.getResources();
      List<Resource> list1 = nextReleaseProblem0.getResources();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      nextReleaseProblem0.getFeatures();
      List<Feature> list0 = nextReleaseProblem0.getFeatures();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      AlgorithmParameters algorithmParameters0 = new AlgorithmParameters();
      nextReleaseProblem0.setAlgorithmParameters(algorithmParameters0);
      AlgorithmParameters algorithmParameters1 = nextReleaseProblem0.getAlgorithmParameters();
      assertNull(algorithmParameters1.getAlgorithmType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      PlanningSolution planningSolution0 = new PlanningSolution();
      nextReleaseProblem0.setCurrentPlan(planningSolution0);
      PlanningSolution planningSolution1 = nextReleaseProblem0.getCurrentPlan();
      assertSame(planningSolution1, planningSolution0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      Vector<Feature> vector0 = new Vector<Feature>();
      Feature feature0 = new Feature();
      vector0.add(feature0);
      nextReleaseProblem0.setFeatures(vector0);
      List<Feature> list0 = nextReleaseProblem0.getFeatures();
      assertTrue(list0.contains(feature0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      Double double0 = new Double((-3794.30014));
      nextReleaseProblem0.setHoursPerWeek(double0);
      Double double1 = nextReleaseProblem0.getHoursPerWeek();
      assertEquals((-3794.30014), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      Double double0 = new Double(803.8);
      nextReleaseProblem0.setHoursPerWeek(double0);
      Double double1 = nextReleaseProblem0.getHoursPerWeek();
      assertEquals(803.8, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      Double double0 = new Double(0.0);
      nextReleaseProblem0.setHoursPerWeek(double0);
      Double double1 = nextReleaseProblem0.getHoursPerWeek();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      Integer integer0 = Integer.getInteger("", (-966));
      nextReleaseProblem0.setNbWeeks(integer0);
      Integer integer1 = nextReleaseProblem0.getNbWeeks();
      assertEquals((-966), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      Integer integer0 = new Integer(890);
      nextReleaseProblem0.setNbWeeks(integer0);
      Integer integer1 = nextReleaseProblem0.getNbWeeks();
      assertEquals(890, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NextReleaseProblem nextReleaseProblem0 = new NextReleaseProblem();
      Stack<Resource> stack0 = new Stack<Resource>();
      stack0.add((Resource) null);
      nextReleaseProblem0.setResources(stack0);
      List<Resource> list0 = nextReleaseProblem0.getResources();
      assertEquals(1, list0.size());
  }
}
