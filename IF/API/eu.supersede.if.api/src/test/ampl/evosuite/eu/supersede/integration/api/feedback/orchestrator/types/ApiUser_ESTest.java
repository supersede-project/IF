/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:19:50 GMT 2019
 */

package eu.supersede.integration.api.feedback.orchestrator.types;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import eu.supersede.integration.api.feedback.orchestrator.types.ApiUser;
import eu.supersede.integration.api.feedback.orchestrator.types.ApiUserApiUserRole;
import eu.supersede.integration.api.feedback.orchestrator.types.ApiUserPermission;
import eu.supersede.integration.api.feedback.orchestrator.types.ApiUserRole;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;

public class ApiUser_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("", "com.google.common.base.Predicates$ObjectPredicate");
      apiUser0.setEnabled((Boolean) null);
      // Undeclared exception!
      try { 
        apiUser0.isEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      boolean boolean0 = apiUser0.isAccountNonExpired();
      assertTrue(boolean0);
      assertTrue(apiUser0.getAccountNonLocked());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      ArrayList<ApiUserApiUserRole> arrayList0 = new ArrayList<ApiUserApiUserRole>();
      apiUser0.setApiUserApiUserRoles(arrayList0);
      apiUser0.getApiUserApiUserRoles();
      assertTrue(apiUser0.getCredentialsNonExpired());
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.getAccountNonExpired());
      assertTrue(apiUser0.isAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      Boolean boolean0 = apiUser0.getCredentialsNonExpired();
      assertTrue(boolean0);
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      boolean boolean0 = apiUser0.isAccountNonLocked();
      assertTrue(apiUser0.getCredentialsNonExpired());
      assertTrue(boolean0);
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.getAccountNonExpired());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      ArrayList<ApiUserPermission> arrayList0 = new ArrayList<ApiUserPermission>();
      apiUser0.setApiUserPermissions(arrayList0);
      apiUser0.getApiUserPermissions();
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.getCredentialsNonExpired());
      assertTrue(apiUser0.getAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      apiUser0.setName("");
      assertTrue(apiUser0.getAccountNonExpired());
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(apiUser0.getEnabled());
      assertTrue(apiUser0.getCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      assertTrue(apiUser0.isCredentialsNonExpired());
      
      apiUser0.setCredentialsNonExpired((Boolean) null);
      apiUser0.getCredentialsNonExpired();
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      assertTrue(apiUser0.isAccountNonExpired());
      
      apiUser0.setAccountNonExpired((Boolean) null);
      apiUser0.getAccountNonExpired();
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.getAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      boolean boolean0 = apiUser0.isCredentialsNonExpired();
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(boolean0);
      assertTrue(apiUser0.getEnabled());
      assertTrue(apiUser0.getAccountNonExpired());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      apiUser0.getPassword();
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.getAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      apiUser0.getUsername();
      assertTrue(apiUser0.getAccountNonLocked());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.getCredentialsNonExpired());
      assertTrue(apiUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      apiUser0.getName();
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.getAccountNonLocked());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.isAccountNonExpired());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("", "com.google.common.base.Predicates$ObjectPredicate");
      boolean boolean0 = apiUser0.isEnabled();
      assertEquals("com.google.common.base.Predicates$ObjectPredicate", apiUser0.getPassword());
      assertEquals("", apiUser0.getName());
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.getAccountNonExpired());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      Boolean boolean0 = apiUser0.getAccountNonExpired();
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.getAccountNonLocked());
      assertTrue(apiUser0.getCredentialsNonExpired());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      apiUser0.setPassword("");
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.isAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      apiUser0.getApiUserPermissions();
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      Boolean boolean0 = apiUser0.getAccountNonLocked();
      assertTrue(boolean0);
      assertTrue(apiUser0.getAccountNonExpired());
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.getCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      Boolean boolean0 = apiUser0.getEnabled();
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(boolean0);
      assertTrue(apiUser0.isAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      apiUser0.getApiUserApiUserRoles();
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.getAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      String string0 = apiUser0.toString();
      assertTrue(apiUser0.getCredentialsNonExpired());
      assertEquals("ApiUser[id=0, name='null', apiUserApiUserRoles='null', authorities='null']", string0);
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.isAccountNonExpired());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<ApiUserApiUserRole> arrayList0 = new ArrayList<ApiUserApiUserRole>();
      ArrayList<ApiUserPermission> arrayList1 = new ArrayList<ApiUserPermission>();
      ApiUser apiUser0 = new ApiUser("", "", arrayList0, arrayList1);
      String string0 = apiUser0.toString();
      assertTrue(apiUser0.getEnabled());
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertEquals("ApiUser[id=0, name='', apiUserApiUserRoles='', authorities='null']", string0);
      assertTrue(apiUser0.getAccountNonExpired());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      ArrayList<ApiUserRole> arrayList0 = new ArrayList<ApiUserRole>();
      apiUser0.setAuthorities(arrayList0);
      String string0 = apiUser0.toString();
      assertEquals("ApiUser[id=0, name='null', apiUserApiUserRoles='', authorities='']", string0);
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.getCredentialsNonExpired());
      assertTrue(apiUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      apiUser0.getAuthorities();
      assertTrue(apiUser0.getCredentialsNonExpired());
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(apiUser0.getEnabled());
      assertTrue(apiUser0.getAccountNonExpired());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<ApiUserApiUserRole> arrayList0 = new ArrayList<ApiUserApiUserRole>();
      ArrayList<ApiUserPermission> arrayList1 = new ArrayList<ApiUserPermission>();
      ApiUserApiUserRole apiUserApiUserRole0 = new ApiUserApiUserRole();
      arrayList0.add(apiUserApiUserRole0);
      ApiUser apiUser0 = new ApiUser("", "", arrayList0, arrayList1);
      apiUser0.getAuthorities();
      assertTrue(apiUser0.getAccountNonLocked());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.getAccountNonExpired());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      Vector<ApiUserRole> vector0 = new Vector<ApiUserRole>();
      apiUser0.setAuthorities(vector0);
      apiUser0.setAuthorities(vector0);
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.getCredentialsNonExpired());
      assertTrue(apiUser0.getAccountNonExpired());
      assertTrue(apiUser0.isAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("4);e8n;", "4);e8n;");
      apiUser0.getId();
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(apiUser0.getAccountNonExpired());
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.getCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      LinkedList<ApiUserApiUserRole> linkedList0 = new LinkedList<ApiUserApiUserRole>();
      linkedList0.add((ApiUserApiUserRole) null);
      apiUser0.setApiUserApiUserRoles(linkedList0);
      // Undeclared exception!
      try { 
        apiUser0.getAuthorities();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("null", "null");
      apiUser0.setCredentialsNonExpired((Boolean) null);
      // Undeclared exception!
      try { 
        apiUser0.isCredentialsNonExpired();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      // Undeclared exception!
      try { 
        apiUser0.setAuthorities((List<ApiUserRole>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<ApiUserApiUserRole> linkedList0 = new LinkedList<ApiUserApiUserRole>();
      linkedList0.add((ApiUserApiUserRole) null);
      ApiUser apiUser0 = new ApiUser("qyMuYz`", "qyMuYz`", linkedList0, (List<ApiUserPermission>) null);
      // Undeclared exception!
      try { 
        apiUser0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("null", "null");
      assertTrue(apiUser0.getAccountNonExpired());
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      apiUser0.setAccountNonExpired(boolean0);
      apiUser0.getAccountNonExpired();
      assertTrue(apiUser0.getCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser((String) null, "1dqc");
      assertTrue(apiUser0.isAccountNonLocked());
      
      Boolean boolean0 = Boolean.FALSE;
      apiUser0.setAccountNonLocked(boolean0);
      apiUser0.getAccountNonLocked();
      assertTrue(apiUser0.getEnabled());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      assertTrue(apiUser0.getAccountNonLocked());
      
      apiUser0.setAccountNonLocked((Boolean) null);
      apiUser0.getAccountNonLocked();
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.getAccountNonExpired());
      assertTrue(apiUser0.getCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("4);e8n;", "4);e8n;");
      LinkedList<ApiUserRole> linkedList0 = new LinkedList<ApiUserRole>();
      ApiUserRole apiUserRole0 = ApiUserRole.SUPER_ADMIN;
      linkedList0.add(apiUserRole0);
      apiUser0.setAuthorities(linkedList0);
      apiUser0.getApiUserApiUserRoles();
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test35()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("", "");
      Stack<ApiUserPermission> stack0 = new Stack<ApiUserPermission>();
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      stack0.add(apiUserPermission0);
      apiUser0.setApiUserPermissions(stack0);
      apiUser0.getApiUserPermissions();
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("eu.supersede.integration.api.feedback.orchestrator.types.ApiUser", "eu.supersede.integration.api.feedback.orchestrator.types.ApiUser");
      assertTrue(apiUser0.isCredentialsNonExpired());
      
      Boolean boolean0 = Boolean.valueOf(false);
      apiUser0.setCredentialsNonExpired(boolean0);
      apiUser0.getCredentialsNonExpired();
      assertTrue(apiUser0.isAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      assertTrue(apiUser0.isEnabled());
      
      Boolean boolean0 = Boolean.FALSE;
      apiUser0.setEnabled(boolean0);
      apiUser0.getEnabled();
      assertTrue(apiUser0.isCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("", "com.google.common.base.Predicates$ObjectPredicate");
      assertTrue(apiUser0.getEnabled());
      
      apiUser0.setEnabled((Boolean) null);
      apiUser0.getEnabled();
      assertTrue(apiUser0.getAccountNonLocked());
      assertEquals("", apiUser0.getName());
      assertEquals("com.google.common.base.Predicates$ObjectPredicate", apiUser0.getPassword());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      apiUser0.setId((-2872L));
      long long0 = apiUser0.getId();
      assertEquals((-2872L), long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("V)]9u^oa6<ITE", "V)]9u^oa6<ITE");
      apiUser0.setId(983L);
      long long0 = apiUser0.getId();
      assertEquals(983L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("", "");
      apiUser0.getName();
      assertTrue(apiUser0.isAccountNonLocked());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.getCredentialsNonExpired());
      assertTrue(apiUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<ApiUserApiUserRole> linkedList0 = new LinkedList<ApiUserApiUserRole>();
      ApiUser apiUser0 = new ApiUser("QEDxv`B^Yi2Y", "", linkedList0, (List<ApiUserPermission>) null);
      String string0 = apiUser0.getName();
      assertTrue(apiUser0.getAccountNonExpired());
      assertEquals("QEDxv`B^Yi2Y", string0);
      assertEquals("", apiUser0.getPassword());
      assertTrue(apiUser0.getAccountNonLocked());
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.getCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<ApiUserApiUserRole> arrayList0 = new ArrayList<ApiUserApiUserRole>();
      ArrayList<ApiUserPermission> arrayList1 = new ArrayList<ApiUserPermission>();
      ApiUser apiUser0 = new ApiUser("", "", arrayList0, arrayList1);
      apiUser0.getPassword();
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser((String) null, "1dqc");
      String string0 = apiUser0.getPassword();
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.isEnabled());
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertNotNull(string0);
      assertTrue(apiUser0.getAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<ApiUserPermission> arrayList0 = new ArrayList<ApiUserPermission>();
      ApiUser apiUser0 = new ApiUser((String) null, "t~/&Pn[*j!Q\"FK2o", (List<ApiUserApiUserRole>) null, arrayList0);
      apiUser0.setUsername("");
      apiUser0.getUsername();
      assertTrue(apiUser0.isCredentialsNonExpired());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.getEnabled());
      assertTrue(apiUser0.getAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      apiUser0.setUsername("null");
      apiUser0.getUsername();
      assertTrue(apiUser0.getAccountNonLocked());
      assertTrue(apiUser0.isAccountNonExpired());
      assertTrue(apiUser0.getCredentialsNonExpired());
      assertTrue(apiUser0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("", "");
      assertTrue(apiUser0.getAccountNonExpired());
      
      Boolean boolean0 = Boolean.valueOf(false);
      apiUser0.setAccountNonExpired(boolean0);
      apiUser0.isAccountNonExpired();
      assertTrue(apiUser0.getCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("4);e8n;", "4);e8n;");
      assertTrue(apiUser0.getAccountNonLocked());
      
      Boolean boolean0 = Boolean.FALSE;
      apiUser0.setAccountNonLocked(boolean0);
      apiUser0.isAccountNonLocked();
      assertTrue(apiUser0.isCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("/:AxA}CIAug[", "");
      assertTrue(apiUser0.isCredentialsNonExpired());
      
      Boolean boolean0 = Boolean.valueOf("%56");
      apiUser0.setCredentialsNonExpired(boolean0);
      apiUser0.isCredentialsNonExpired();
      assertTrue(apiUser0.getEnabled());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      assertTrue(apiUser0.isEnabled());
      
      Boolean boolean0 = new Boolean(false);
      apiUser0.setEnabled(boolean0);
      apiUser0.isEnabled();
      assertTrue(apiUser0.getAccountNonLocked());
  }
}
