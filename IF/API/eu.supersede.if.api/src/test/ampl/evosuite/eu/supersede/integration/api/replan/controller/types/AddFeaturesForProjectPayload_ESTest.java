/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:21:54 GMT 2019
 */

package eu.supersede.integration.api.replan.controller.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.replan.controller.types.AddFeaturesForProjectPayload;
import eu.supersede.integration.api.replan.controller.types.Constraint;
import eu.supersede.integration.api.replan.controller.types.FeatureWP3;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class AddFeaturesForProjectPayload_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AddFeaturesForProjectPayload addFeaturesForProjectPayload0 = new AddFeaturesForProjectPayload();
      String string0 = addFeaturesForProjectPayload0.getEvaluationTime();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AddFeaturesForProjectPayload addFeaturesForProjectPayload0 = new AddFeaturesForProjectPayload();
      addFeaturesForProjectPayload0.setConstraints((List<Constraint>) null);
      List<Constraint> list0 = addFeaturesForProjectPayload0.getConstraints();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AddFeaturesForProjectPayload addFeaturesForProjectPayload0 = new AddFeaturesForProjectPayload();
      addFeaturesForProjectPayload0.setEvaluationTime("");
      String string0 = addFeaturesForProjectPayload0.getEvaluationTime();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AddFeaturesForProjectPayload addFeaturesForProjectPayload0 = new AddFeaturesForProjectPayload();
      addFeaturesForProjectPayload0.setFeatures((List<FeatureWP3>) null);
      List<FeatureWP3> list0 = addFeaturesForProjectPayload0.getFeatures();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AddFeaturesForProjectPayload addFeaturesForProjectPayload0 = new AddFeaturesForProjectPayload();
      List<FeatureWP3> list0 = addFeaturesForProjectPayload0.getFeatures();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AddFeaturesForProjectPayload addFeaturesForProjectPayload0 = new AddFeaturesForProjectPayload();
      List<Constraint> list0 = addFeaturesForProjectPayload0.getConstraints();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AddFeaturesForProjectPayload addFeaturesForProjectPayload0 = new AddFeaturesForProjectPayload();
      Stack<Constraint> stack0 = new Stack<Constraint>();
      stack0.add((Constraint) null);
      addFeaturesForProjectPayload0.setConstraints(stack0);
      List<Constraint> list0 = addFeaturesForProjectPayload0.getConstraints();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AddFeaturesForProjectPayload addFeaturesForProjectPayload0 = new AddFeaturesForProjectPayload();
      addFeaturesForProjectPayload0.setEvaluationTime("Functions.toStringFunction()");
      String string0 = addFeaturesForProjectPayload0.getEvaluationTime();
      assertEquals("Functions.toStringFunction()", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AddFeaturesForProjectPayload addFeaturesForProjectPayload0 = new AddFeaturesForProjectPayload();
      ArrayList<FeatureWP3> arrayList0 = new ArrayList<FeatureWP3>();
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      arrayList0.add(featureWP3_0);
      addFeaturesForProjectPayload0.setFeatures(arrayList0);
      List<FeatureWP3> list0 = addFeaturesForProjectPayload0.getFeatures();
      assertTrue(list0.contains(featureWP3_0));
  }
}
