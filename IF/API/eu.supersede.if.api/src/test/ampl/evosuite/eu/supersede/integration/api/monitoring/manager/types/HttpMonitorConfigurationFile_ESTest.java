/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:13:11 GMT 2019
 */

package eu.supersede.integration.api.monitoring.manager.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.monitoring.manager.types.HttpMonitorConfigurationFile;
import java.util.List;
import java.util.Vector;

public class HttpMonitorConfigurationFile_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      httpMonitorConfigurationFile0.setServer("");
      String string0 = httpMonitorConfigurationFile0.getServer();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      String string0 = httpMonitorConfigurationFile0.getServer();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      String string0 = httpMonitorConfigurationFile0.getProtocol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      Integer integer0 = httpMonitorConfigurationFile0.getTextContentSize();
      httpMonitorConfigurationFile0.setTextContentSize(integer0);
      assertNull(httpMonitorConfigurationFile0.getServer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      Integer integer0 = httpMonitorConfigurationFile0.getTimeSlot();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      List<String> list0 = httpMonitorConfigurationFile0.getListOfEvents();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("vhMdx'^GF-pUf5SHL");
      httpMonitorConfigurationFile0.setListOfEvents(vector0);
      List<String> list0 = httpMonitorConfigurationFile0.getListOfEvents();
      assertTrue(list0.contains("vhMdx'^GF-pUf5SHL"));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      httpMonitorConfigurationFile0.setProtocol("");
      String string0 = httpMonitorConfigurationFile0.getProtocol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      httpMonitorConfigurationFile0.setProtocol("org.apache.axis2.deployment.DeploymentClassLoader$ByteURLConnection");
      String string0 = httpMonitorConfigurationFile0.getProtocol();
      assertEquals("org.apache.axis2.deployment.DeploymentClassLoader$ByteURLConnection", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      httpMonitorConfigurationFile0.setServer("ka@0nQK5nLLRtIE7j");
      String string0 = httpMonitorConfigurationFile0.getServer();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      Integer integer0 = new Integer((-1900));
      httpMonitorConfigurationFile0.textContentSize = integer0;
      Integer integer1 = httpMonitorConfigurationFile0.getTextContentSize();
      assertEquals((-1900), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      Integer integer0 = new Integer(810);
      httpMonitorConfigurationFile0.setTextContentSize(integer0);
      Integer integer1 = httpMonitorConfigurationFile0.getTextContentSize();
      assertEquals(810, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      Integer integer0 = new Integer(0);
      httpMonitorConfigurationFile0.setTextContentSize(integer0);
      Integer integer1 = httpMonitorConfigurationFile0.getTextContentSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      Integer integer0 = new Integer((-2361));
      httpMonitorConfigurationFile0.setTimeSlot(integer0);
      Integer integer1 = httpMonitorConfigurationFile0.getTimeSlot();
      assertEquals((-2361), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      Integer integer0 = Integer.getInteger("kIYx48UAYCn+p", 1);
      httpMonitorConfigurationFile0.setTimeSlot(integer0);
      Integer integer1 = httpMonitorConfigurationFile0.getTimeSlot();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpMonitorConfigurationFile httpMonitorConfigurationFile0 = new HttpMonitorConfigurationFile();
      Integer integer0 = Integer.valueOf(0);
      httpMonitorConfigurationFile0.timeSlot = integer0;
      Integer integer1 = httpMonitorConfigurationFile0.getTimeSlot();
      assertEquals(0, (int)integer1);
  }
}
