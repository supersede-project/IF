/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:54:08 GMT 2019
 */

package eu.supersede.integration.api.feedback.repository.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.feedback.orchestrator.types.ApiUserPermission;
import eu.supersede.integration.api.feedback.orchestrator.types.Application;
import eu.supersede.integration.api.feedback.orchestrator.types.Configuration;
import eu.supersede.integration.api.feedback.orchestrator.types.GeneralConfiguration;
import eu.supersede.integration.api.feedback.orchestrator.types.User;
import eu.supersede.integration.api.feedback.orchestrator.types.UserGroup;
import eu.supersede.integration.api.feedback.repository.types.AttachmentFeedback;
import eu.supersede.integration.api.feedback.repository.types.AudioFeedback;
import eu.supersede.integration.api.feedback.repository.types.CategoryFeedback;
import eu.supersede.integration.api.feedback.repository.types.ContextInformation;
import eu.supersede.integration.api.feedback.repository.types.Feedback;
import eu.supersede.integration.api.feedback.repository.types.FeedbackStatus;
import eu.supersede.integration.api.feedback.repository.types.RatingFeedback;
import eu.supersede.integration.api.feedback.repository.types.ScreenshotFeedback;
import eu.supersede.integration.api.feedback.repository.types.Status;
import eu.supersede.integration.api.feedback.repository.types.TextAnnotation;
import eu.supersede.integration.api.feedback.repository.types.TextFeedback;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.mock.java.util.MockDate;

public class Feedback_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Feedback feedback0 = new Feedback("", "G", 0L, 0L, "");
      feedback0.getCategoryFeedbacks();
      assertEquals("G", feedback0.getUserIdentification());
      assertEquals("", feedback0.getTitle());
      assertEquals("", feedback0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Feedback feedback0 = new Feedback("", "", 2052L, 0L, "");
      feedback0.getCreatedAt();
      assertEquals(0L, feedback0.getConfigurationId());
      assertEquals(2052L, feedback0.getApplicationId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      feedback0.setLanguage("com.google.common.base.Enums$StringConverter");
      assertNull(feedback0.getTitle());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Feedback feedback0 = new Feedback("", "G", 0L, 0L, "");
      feedback0.getRatingFeedbacks();
      assertEquals("G", feedback0.getUserIdentification());
      assertEquals("", feedback0.getTitle());
      assertEquals("", feedback0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Feedback feedback0 = new Feedback("s6K^O\"s!zJAJws4d29zo", "not a valid Double value", 154L, 154L, "s6K^O\"s!zJAJws4d29zo");
      feedback0.getUpdatedAt();
      assertEquals("s6K^O\"s!zJAJws4d29zo", feedback0.getLanguage());
      assertEquals(154L, feedback0.getConfigurationId());
      assertEquals("s6K^O\"s!zJAJws4d29zo", feedback0.getTitle());
      assertEquals("not a valid Double value", feedback0.getUserIdentification());
      assertEquals(154L, feedback0.getApplicationId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Feedback feedback0 = new Feedback("4w)4|", "", (-28L), (-28L), "I");
      String string0 = feedback0.getTitle();
      assertEquals("", feedback0.getUserIdentification());
      assertEquals((-28L), feedback0.getApplicationId());
      assertEquals("I", feedback0.getLanguage());
      assertEquals("4w)4|", string0);
      assertEquals((-28L), feedback0.getConfigurationId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Feedback feedback0 = new Feedback("", "G", 0L, 0L, "");
      feedback0.getTextFeedbacks();
      assertEquals("", feedback0.getLanguage());
      assertEquals("", feedback0.getTitle());
      assertEquals("G", feedback0.getUserIdentification());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Feedback feedback0 = new Feedback("4w)4|", "", (-28L), (-28L), "I");
      feedback0.getId();
      assertEquals("", feedback0.getUserIdentification());
      assertEquals((-28L), feedback0.getApplicationId());
      assertEquals("4w)4|", feedback0.getTitle());
      assertEquals("I", feedback0.getLanguage());
      assertEquals((-28L), feedback0.getConfigurationId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Feedback feedback0 = new Feedback("#'zn_}", "#'zn_}", 1L, 4255L, "#'zn_}");
      Vector<ScreenshotFeedback> vector0 = new Vector<ScreenshotFeedback>();
      feedback0.setScreenshotFeedbacks(vector0);
      feedback0.getScreenshotFeedbacks();
      assertEquals(1L, feedback0.getApplicationId());
      assertEquals(4255L, feedback0.getConfigurationId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      feedback0.setUserIdentification("Feedback[id=%d, configurationId=%d]");
      assertNull(feedback0.getTitle());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Feedback feedback0 = new Feedback("", "", 0L, 0L, "");
      String string0 = feedback0.getUserIdentification();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Feedback feedback0 = new Feedback("", "", 0L, 0L, "");
      List<AttachmentFeedback> list0 = feedback0.getAttachmentFeedbacks();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      Application application0 = feedback0.getApplication();
      assertNull(application0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      String string0 = feedback0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      List<AudioFeedback> list0 = feedback0.getAudioFeedbacks();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Feedback feedback0 = new Feedback((String) null, "~bs", 2890L, 2890L, "~bs");
      long long0 = feedback0.getApplicationId();
      assertEquals(2890L, feedback0.getConfigurationId());
      assertEquals(2890L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      feedback0.setTitle("1UWR}");
      assertEquals("1UWR}", feedback0.getTitle());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      feedback0.setApplicationId(2538L);
      assertEquals(2538L, feedback0.getApplicationId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3504, 3504, 3504);
      ContextInformation contextInformation0 = new ContextInformation();
      ArrayList<AudioFeedback> arrayList0 = new ArrayList<AudioFeedback>();
      ArrayList<CategoryFeedback> arrayList1 = new ArrayList<CategoryFeedback>();
      Vector<RatingFeedback> vector0 = new Vector<RatingFeedback>();
      LinkedList<ScreenshotFeedback> linkedList0 = new LinkedList<ScreenshotFeedback>();
      Stack<TextFeedback> stack0 = new Stack<TextFeedback>();
      Stack<Status> stack1 = new Stack<Status>();
      Feedback feedback0 = new Feedback("it=p\\vF5;", "it=p\\vF5;", mockDate0, mockDate0, 3504, 3504, "it=p\\vF5;", contextInformation0, (List<AttachmentFeedback>) null, arrayList0, arrayList1, vector0, linkedList0, stack0, stack1);
      List<Status> list0 = feedback0.getStatuses();
      assertNotNull(list0);
      assertEquals(3504L, feedback0.getApplicationId());
      assertEquals(3504L, feedback0.getConfigurationId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Feedback feedback0 = new Feedback("#'zn_}", "#'zn_}", 1L, 4255L, "#'zn_}");
      Application application0 = new Application();
      feedback0.setApplication(application0);
      feedback0.getApplication();
      assertEquals(4255L, feedback0.getConfigurationId());
      assertEquals(1L, feedback0.getApplicationId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      FeedbackStatus feedbackStatus0 = feedback0.getFeedbackStatus();
      assertNull(feedbackStatus0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      String string0 = feedback0.toString();
      assertEquals("Feedback[id=0, configurationId=0]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      List<Status> list0 = feedback0.getStatuses();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Feedback feedback0 = new Feedback("", "G", 0L, 0L, "");
      feedback0.getScreenshotFeedbacks();
      assertEquals("", feedback0.getLanguage());
      assertEquals("G", feedback0.getUserIdentification());
      assertEquals("", feedback0.getTitle());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      ContextInformation contextInformation0 = feedback0.getContextInformation();
      assertNull(contextInformation0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      long long0 = feedback0.getConfigurationId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      MockDate mockDate0 = new MockDate();
      GeneralConfiguration generalConfiguration0 = new GeneralConfiguration();
      LinkedList<Configuration> linkedList0 = new LinkedList<Configuration>();
      Stack<User> stack0 = new Stack<User>();
      Application application0 = new Application("Wp?kiG:", (-1919), mockDate0, mockDate0, generalConfiguration0, linkedList0, stack0);
      feedback0.setApplication(application0);
      Application application1 = feedback0.getApplication();
      assertEquals(0L, application1.getId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      MockDate mockDate0 = new MockDate(1L);
      GeneralConfiguration generalConfiguration0 = new GeneralConfiguration();
      ArrayList<Configuration> arrayList0 = new ArrayList<Configuration>();
      ArrayList<User> arrayList1 = new ArrayList<User>();
      ArrayList<UserGroup> arrayList2 = new ArrayList<UserGroup>();
      Application application0 = new Application("Cm", 195, mockDate0, mockDate0, generalConfiguration0, arrayList0, arrayList1, arrayList2, (List<ApiUserPermission>) null);
      feedback0.setApplication(application0);
      Application application1 = feedback0.getApplication();
      assertSame(application1, application0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Feedback feedback0 = new Feedback("4w)4|", "", (-28L), (-28L), "I");
      long long0 = feedback0.getApplicationId();
      assertEquals("4w)4|", feedback0.getTitle());
      assertEquals((-28L), feedback0.getConfigurationId());
      assertEquals((-28L), long0);
      assertEquals("I", feedback0.getLanguage());
      assertEquals("", feedback0.getUserIdentification());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      long long0 = feedback0.getApplicationId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      ArrayList<AttachmentFeedback> arrayList0 = new ArrayList<AttachmentFeedback>();
      AttachmentFeedback attachmentFeedback0 = new AttachmentFeedback("+Dg{", 0L);
      arrayList0.add(attachmentFeedback0);
      feedback0.setAttachmentFeedbacks(arrayList0);
      List<AttachmentFeedback> list0 = feedback0.getAttachmentFeedbacks();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      Vector<AttachmentFeedback> vector0 = new Vector<AttachmentFeedback>();
      feedback0.setAttachmentFeedbacks(vector0);
      List<AttachmentFeedback> list0 = feedback0.getAttachmentFeedbacks();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      ArrayList<AudioFeedback> arrayList0 = new ArrayList<AudioFeedback>();
      AudioFeedback audioFeedback0 = new AudioFeedback();
      arrayList0.add(audioFeedback0);
      feedback0.setAudioFeedbacks(arrayList0);
      List<AudioFeedback> list0 = feedback0.getAudioFeedbacks();
      assertTrue(list0.contains(audioFeedback0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Feedback feedback0 = new Feedback("s6K^O\"s!zJAJws4d29zo", "not a valid Double value", 154L, 154L, "s6K^O\"s!zJAJws4d29zo");
      Vector<AudioFeedback> vector0 = new Vector<AudioFeedback>();
      feedback0.setAudioFeedbacks(vector0);
      feedback0.getAudioFeedbacks();
      assertEquals(154L, feedback0.getConfigurationId());
      assertEquals("not a valid Double value", feedback0.getUserIdentification());
      assertEquals(154L, feedback0.getApplicationId());
      assertEquals("s6K^O\"s!zJAJws4d29zo", feedback0.getTitle());
      assertEquals("s6K^O\"s!zJAJws4d29zo", feedback0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Feedback feedback0 = new Feedback("", "G", 0L, 0L, "");
      Stack<CategoryFeedback> stack0 = new Stack<CategoryFeedback>();
      CategoryFeedback categoryFeedback0 = new CategoryFeedback(feedback0, 0L, (String) null);
      stack0.add(categoryFeedback0);
      feedback0.setCategoryFeedbacks(stack0);
      feedback0.getCategoryFeedbacks();
      assertEquals("", feedback0.getLanguage());
      assertEquals("", feedback0.getTitle());
      assertEquals("G", feedback0.getUserIdentification());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      ContextInformation contextInformation0 = new ContextInformation();
      Vector<AttachmentFeedback> vector0 = new Vector<AttachmentFeedback>();
      LinkedList<AudioFeedback> linkedList0 = new LinkedList<AudioFeedback>();
      Stack<CategoryFeedback> stack0 = new Stack<CategoryFeedback>();
      Vector<ScreenshotFeedback> vector1 = new Vector<ScreenshotFeedback>();
      Feedback feedback0 = new Feedback("O;/%D0O", "O;/%D0O", mockDate0, mockDate0, 64L, 64L, "k", contextInformation0, vector0, linkedList0, stack0, (List<RatingFeedback>) null, vector1, (List<TextFeedback>) null, (List<Status>) null);
      List<CategoryFeedback> list0 = feedback0.getCategoryFeedbacks();
      assertEquals(64L, feedback0.getApplicationId());
      assertEquals(64L, feedback0.getConfigurationId());
      assertEquals("O;/%D0O", feedback0.getUserIdentification());
      assertNotNull(list0);
      assertEquals("k", feedback0.getLanguage());
      assertEquals("O;/%D0O", feedback0.getTitle());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Feedback feedback0 = new Feedback((String) null, "com.google.common.base.CharMatcher$1", 0L, (-409L), "com.google.common.base.CharMatcher$1");
      long long0 = feedback0.getConfigurationId();
      assertEquals((-409L), long0);
      assertEquals(0L, feedback0.getApplicationId());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      feedback0.setConfigurationId(1286L);
      long long0 = feedback0.getConfigurationId();
      assertEquals(1286L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      MockDate mockDate0 = new MockDate(1319, (-4478), 1319);
      Float float0 = new Float((float) (-4478));
      ContextInformation contextInformation0 = new ContextInformation("", "Wgbu.B)", "~T;zm&lJbp", mockDate0, "", float0, "", "H*ZKQ2/3e3gW 0", "", "");
      contextInformation0.setId(1319);
      feedback0.setContextInformation(contextInformation0);
      ContextInformation contextInformation1 = feedback0.getContextInformation();
      assertEquals("", contextInformation1.getMetaData());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Feedback feedback0 = new Feedback("4w)4|", "", (-28L), (-28L), "I");
      ContextInformation contextInformation0 = new ContextInformation();
      feedback0.setContextInformation(contextInformation0);
      feedback0.getContextInformation();
      assertEquals("", feedback0.getUserIdentification());
      assertEquals((-28L), feedback0.getApplicationId());
      assertEquals("4w)4|", feedback0.getTitle());
      assertEquals((-28L), feedback0.getConfigurationId());
      assertEquals("I", feedback0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Feedback feedback0 = new Feedback("", "", 2052L, 0L, "");
      MockDate mockDate0 = new MockDate();
      feedback0.setCreatedAt(mockDate0);
      feedback0.getCreatedAt();
      assertEquals(0L, feedback0.getConfigurationId());
      assertEquals(2052L, feedback0.getApplicationId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      FeedbackStatus feedbackStatus0 = new FeedbackStatus();
      feedback0.setFeedbackStatus(feedbackStatus0);
      FeedbackStatus feedbackStatus1 = feedback0.getFeedbackStatus();
      assertSame(feedbackStatus1, feedbackStatus0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      feedback0.setId((-1L));
      long long0 = feedback0.getId();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      feedback0.setId(1L);
      long long0 = feedback0.getId();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-1448), 0, (-1448), 0);
      Vector<AttachmentFeedback> vector0 = new Vector<AttachmentFeedback>();
      Vector<AudioFeedback> vector1 = new Vector<AudioFeedback>();
      Stack<CategoryFeedback> stack0 = new Stack<CategoryFeedback>();
      ArrayList<RatingFeedback> arrayList0 = new ArrayList<RatingFeedback>();
      LinkedList<RatingFeedback> linkedList0 = new LinkedList<RatingFeedback>(arrayList0);
      LinkedList<ScreenshotFeedback> linkedList1 = new LinkedList<ScreenshotFeedback>();
      LinkedList<TextFeedback> linkedList2 = new LinkedList<TextFeedback>();
      LinkedList<Status> linkedList3 = new LinkedList<Status>();
      Feedback feedback0 = new Feedback("", "", mockDate0, mockDate0, (-1448), 1071L, "", (ContextInformation) null, vector0, vector1, stack0, linkedList0, linkedList1, linkedList2, linkedList3);
      feedback0.getLanguage();
      assertEquals((-1448L), feedback0.getApplicationId());
      assertEquals(1071L, feedback0.getConfigurationId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      ContextInformation contextInformation0 = new ContextInformation();
      LinkedList<AttachmentFeedback> linkedList0 = new LinkedList<AttachmentFeedback>();
      ArrayList<AudioFeedback> arrayList0 = new ArrayList<AudioFeedback>();
      Vector<CategoryFeedback> vector0 = new Vector<CategoryFeedback>();
      ArrayList<RatingFeedback> arrayList1 = new ArrayList<RatingFeedback>();
      Stack<ScreenshotFeedback> stack0 = new Stack<ScreenshotFeedback>();
      Stack<TextFeedback> stack1 = new Stack<TextFeedback>();
      Feedback feedback0 = new Feedback("", "8^D#56k", mockDate0, mockDate0, 64L, (-534L), ">,ZImcc_}c+lMAG7';0", contextInformation0, linkedList0, arrayList0, vector0, arrayList1, stack0, stack1, (List<Status>) null);
      String string0 = feedback0.getLanguage();
      assertEquals(64L, feedback0.getApplicationId());
      assertEquals("", feedback0.getTitle());
      assertEquals((-534L), feedback0.getConfigurationId());
      assertEquals(">,ZImcc_}c+lMAG7';0", string0);
      assertEquals("8^D#56k", feedback0.getUserIdentification());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Feedback feedback0 = new Feedback("", "", 2052L, 0L, "");
      Stack<RatingFeedback> stack0 = new Stack<RatingFeedback>();
      stack0.add((RatingFeedback) null);
      feedback0.setRatingFeedbacks(stack0);
      feedback0.getRatingFeedbacks();
      assertEquals(2052L, feedback0.getApplicationId());
      assertEquals(0L, feedback0.getConfigurationId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Feedback feedback0 = new Feedback("", "G", 0L, 0L, "");
      Stack<RatingFeedback> stack0 = new Stack<RatingFeedback>();
      feedback0.setRatingFeedbacks(stack0);
      feedback0.getRatingFeedbacks();
      assertEquals("G", feedback0.getUserIdentification());
      assertEquals("", feedback0.getLanguage());
      assertEquals("", feedback0.getTitle());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      Vector<ScreenshotFeedback> vector0 = new Vector<ScreenshotFeedback>();
      LinkedList<TextAnnotation> linkedList0 = new LinkedList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback(0L, linkedList0);
      vector0.add(screenshotFeedback0);
      feedback0.setScreenshotFeedbacks(vector0);
      List<ScreenshotFeedback> list0 = feedback0.getScreenshotFeedbacks();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Feedback feedback0 = new Feedback("4w)4|", "", (-28L), (-28L), "I");
      Vector<Status> vector0 = new Vector<Status>();
      Status status0 = new Status();
      vector0.add(status0);
      feedback0.setStatuses(vector0);
      feedback0.getStatuses();
      assertEquals((-28L), feedback0.getApplicationId());
      assertEquals((-28L), feedback0.getConfigurationId());
      assertEquals("I", feedback0.getLanguage());
      assertEquals("4w)4|", feedback0.getTitle());
      assertEquals("", feedback0.getUserIdentification());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      Vector<TextFeedback> vector0 = new Vector<TextFeedback>(0, 0);
      TextFeedback textFeedback0 = new TextFeedback();
      vector0.add(textFeedback0);
      feedback0.setTextFeedbacks(vector0);
      List<TextFeedback> list0 = feedback0.getTextFeedbacks();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Float float0 = new Float(552.14F);
      ContextInformation contextInformation0 = new ContextInformation("^tnm", "Feedback[id=%d, configurationId=%d]", "overflow, value can not be represented as 8-bit value", mockDate0, "^tnm", float0, "Feedback[id=%d, configurationId=%d]", "overflow, value can not be represented as 8-bit value", "", "2wYaE");
      ArrayList<AttachmentFeedback> arrayList0 = new ArrayList<AttachmentFeedback>();
      Stack<AudioFeedback> stack0 = new Stack<AudioFeedback>();
      LinkedList<CategoryFeedback> linkedList0 = new LinkedList<CategoryFeedback>();
      Vector<TextFeedback> vector0 = new Vector<TextFeedback>();
      LinkedList<Status> linkedList1 = new LinkedList<Status>();
      Feedback feedback0 = new Feedback("eu.supersede.integration.api.feedback.repository.types.Feedback", "Feedback[id=%d, configurationId=%d]", mockDate0, mockDate0, 0L, 1L, "Feedback[id=%d, configurationId=%d]", contextInformation0, arrayList0, stack0, linkedList0, (List<RatingFeedback>) null, (List<ScreenshotFeedback>) null, vector0, linkedList1);
      List<TextFeedback> list0 = feedback0.getTextFeedbacks();
      assertEquals(1L, feedback0.getConfigurationId());
      assertEquals("eu.supersede.integration.api.feedback.repository.types.Feedback", feedback0.getTitle());
      assertEquals(0L, feedback0.getApplicationId());
      assertNotNull(list0);
      assertEquals("Feedback[id=%d, configurationId=%d]", feedback0.getUserIdentification());
      assertEquals("Feedback[id=%d, configurationId=%d]", feedback0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-1257), (-1257), 14, 2572);
      Float float0 = Float.valueOf(0.0F);
      ContextInformation contextInformation0 = new ContextInformation("", "", "", mockDate0, "", float0, "", "", "", "");
      Stack<AttachmentFeedback> stack0 = new Stack<AttachmentFeedback>();
      ArrayList<AttachmentFeedback> arrayList0 = new ArrayList<AttachmentFeedback>(stack0);
      Vector<AudioFeedback> vector0 = new Vector<AudioFeedback>();
      ArrayList<CategoryFeedback> arrayList1 = new ArrayList<CategoryFeedback>();
      Stack<RatingFeedback> stack1 = new Stack<RatingFeedback>();
      Stack<ScreenshotFeedback> stack2 = new Stack<ScreenshotFeedback>();
      LinkedList<TextFeedback> linkedList0 = new LinkedList<TextFeedback>();
      ArrayList<Status> arrayList2 = new ArrayList<Status>();
      Feedback feedback0 = new Feedback("", "", mockDate0, mockDate0, 2572, 2297L, "", contextInformation0, arrayList0, vector0, arrayList1, stack1, stack2, linkedList0, arrayList2);
      feedback0.getTitle();
      assertEquals(2297L, feedback0.getConfigurationId());
      assertEquals(2572L, feedback0.getApplicationId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      String string0 = feedback0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      MockDate mockDate0 = new MockDate(0L);
      feedback0.setUpdatedAt(mockDate0);
      Date date0 = feedback0.getUpdatedAt();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Feedback feedback0 = new Feedback("\"G|qIB", "\"G|qIB", 3104L, (-2718L), "1Ukw/(s.iJr^Sy");
      String string0 = feedback0.getUserIdentification();
      assertEquals("\"G|qIB", feedback0.getTitle());
      assertEquals("1Ukw/(s.iJr^Sy", feedback0.getLanguage());
      assertEquals(3104L, feedback0.getApplicationId());
      assertEquals((-2718L), feedback0.getConfigurationId());
      assertEquals("\"G|qIB", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Feedback feedback0 = new Feedback();
      String string0 = feedback0.getUserIdentification();
      assertNull(string0);
  }
}
