/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:45:31 GMT 2019
 */

package eu.supersede.integration.api.replan.optimizer_v2.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.replan.optimizer_v2.types.Feature;
import eu.supersede.integration.api.replan.optimizer_v2.types.Priority;
import eu.supersede.integration.api.replan.optimizer_v2.types.Skill;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

public class Feature_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Feature feature0 = new Feature();
      feature0.setRequiredSkills((List<Skill>) null);
      List<Skill> list0 = feature0.getRequiredSkills();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Feature feature0 = new Feature();
      Double double0 = feature0.getDuration();
      feature0.setDuration(double0);
      assertNull(feature0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Feature feature0 = new Feature();
      Priority priority0 = feature0.getPriority();
      assertNull(priority0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Feature feature0 = new Feature();
      String string0 = feature0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Feature feature0 = new Feature();
      List<Skill> list0 = feature0.getRequiredSkills();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Feature feature0 = new Feature();
      feature0.setDependencies((List<Feature>) null);
      List<Feature> list0 = feature0.getDependencies();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Feature feature0 = new Feature();
      Vector<Feature> vector0 = new Vector<Feature>(8233);
      vector0.add(feature0);
      feature0.setDependencies(vector0);
      List<Feature> list0 = feature0.getDependencies();
      assertTrue(list0.contains(feature0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Feature feature0 = new Feature();
      Double double0 = new Double((-1378.96703142641));
      feature0.setDuration(double0);
      Double double1 = feature0.getDuration();
      assertEquals((-1378.96703142641), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Feature feature0 = new Feature();
      Double double0 = new Double(10.712688);
      feature0.setDuration(double0);
      Double double1 = feature0.getDuration();
      assertEquals(10.712688, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Feature feature0 = new Feature();
      Double double0 = new Double(0.0);
      feature0.setDuration(double0);
      Double double1 = feature0.getDuration();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Feature feature0 = new Feature();
      feature0.setName("");
      String string0 = feature0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Feature feature0 = new Feature();
      feature0.setName("Lwp.tfQLNj");
      String string0 = feature0.getName();
      assertEquals("Lwp.tfQLNj", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Feature feature0 = new Feature();
      Priority priority0 = new Priority();
      feature0.setPriority(priority0);
      Priority priority1 = feature0.getPriority();
      assertNull(priority1.getLevel());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Feature feature0 = new Feature();
      ArrayList<Skill> arrayList0 = new ArrayList<Skill>();
      arrayList0.add((Skill) null);
      feature0.setRequiredSkills(arrayList0);
      List<Skill> list0 = feature0.getRequiredSkills();
      assertFalse(list0.isEmpty());
  }
}
