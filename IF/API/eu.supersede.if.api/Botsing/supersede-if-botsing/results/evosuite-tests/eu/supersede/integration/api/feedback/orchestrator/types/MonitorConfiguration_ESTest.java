/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:31:26 GMT 2019
 */

package eu.supersede.integration.api.feedback.orchestrator.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration;
import eu.supersede.integration.api.feedback.orchestrator.types.MonitorTool;
import eu.supersede.integration.api.feedback.orchestrator.types.MonitorType;
import eu.supersede.integration.api.monitoring.manager.types.Method;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;

public class MonitorConfiguration_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      String string0 = monitorConfiguration0.toString();
      assertEquals("MonitorConfiguration[id=0, monitorTool='null', configSender='null', timeStamp='null', timeSlot='null', kafkaEndpoint='null', kafkaTopic='null', state='null', keywordExpression='null', packageName='null', appId='null', url='null']", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      long long0 = monitorConfiguration0.getMonitorManagerId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<MonitorConfiguration> linkedList0 = new LinkedList<MonitorConfiguration>();
      MonitorType monitorType0 = new MonitorType("");
      MonitorTool monitorTool0 = new MonitorTool("", linkedList0, monitorType0, "?zO");
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, ";gE$t7sP$>y`5~*qk*", "nE5/^e\"6:`R", "nE5/^e\"6:`R", "?zO", "OH+hWANgMpQa", "nE5/^e\"6:`R", "", "=", "=", "");
      String string0 = monitorConfiguration0.getAppId();
      assertEquals("OH+hWANgMpQa", monitorConfiguration0.getKafkaTopic());
      assertEquals(";gE$t7sP$>y`5~*qk*", monitorConfiguration0.getConfigSender());
      assertEquals("", monitorConfiguration0.getUrl());
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getTimeStamp());
      assertEquals("?zO", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("=", monitorConfiguration0.getPackageName());
      assertEquals("", monitorConfiguration0.getKeywordExpression());
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getState());
      assertEquals("=", string0);
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getTimeSlot());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      monitorConfiguration0.setKafkaEndpoint((String) null);
      assertNull(monitorConfiguration0.getTimeStamp());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      String string0 = monitorConfiguration0.getState();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      long long0 = monitorConfiguration0.getId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      MonitorTool monitorTool0 = new MonitorTool();
      monitorConfiguration0.setMonitorTool(monitorTool0);
      assertNull(monitorConfiguration0.getKafkaEndpoint());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      String string0 = monitorConfiguration0.getKafkaEndpoint();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      String string0 = monitorConfiguration0.getTimeSlot();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, "Mu-ut@si2}g", "Mu-ut@si2}g", "Mu-ut@si2}g", "Mu-ut@si2}g", "Mu-ut@si2}g", "Mu-ut@si2}g", "Mu-ut@si2}g", "Mu-ut@si2}g", "Mu-ut@si2}g", "Mu-ut@si2}g");
      monitorConfiguration0.setTimeStamp("Mu-ut@si2}g");
      assertEquals(0L, monitorConfiguration0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<MonitorConfiguration> linkedList0 = new LinkedList<MonitorConfiguration>();
      MonitorType monitorType0 = new MonitorType("");
      MonitorTool monitorTool0 = new MonitorTool("", linkedList0, monitorType0, "?zO");
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, ";gE$t7sP$>y`5~*qk*", "nE5/^e\"6:`R", "nE5/^e\"6:`R", "?zO", "OH+hWANgMpQa", "nE5/^e\"6:`R", "", "=", "=", "");
      monitorConfiguration0.getMonitorTool();
      assertEquals(";gE$t7sP$>y`5~*qk*", monitorConfiguration0.getConfigSender());
      assertEquals("=", monitorConfiguration0.getAppId());
      assertEquals("", monitorConfiguration0.getUrl());
      assertEquals("OH+hWANgMpQa", monitorConfiguration0.getKafkaTopic());
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getTimeSlot());
      assertEquals("", monitorConfiguration0.getKeywordExpression());
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getState());
      assertEquals("=", monitorConfiguration0.getPackageName());
      assertEquals("?zO", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getTimeStamp());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      monitorConfiguration0.setPackageName("MonitorConfiguration[id=%d, monitorTool='%s', configSender='%s', timeStamp='%s', timeSlot='%s', kafkaEndpoint='%s', kafkaTopic='%s', state='%s', keywordExpression='%s', packageName='%s', appId='%s', url='%s']");
      assertNull(monitorConfiguration0.getTimeStamp());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      Method method0 = Method.GET;
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, (-2875L), "com.google.common.base.CharMatcher$Invisible", "com.google.common.base.CharMatcher$Invisible", "com.google.common.base.CharMatcher$Invisible", "com.google.common.base.Predicates$NotPredicate", "6I4wyE)d+~|~W`.;Q", "", "EYFK*>k*\"o{QUR/nlu", "EYFK*>k*\"o{QUR/nlu", "dNiyy~WqR|uH?05VM?@", ":`_du_=<XB?=", method0);
      assertEquals("com.google.common.base.CharMatcher$Invisible", monitorConfiguration0.getConfigSender());
      
      monitorConfiguration0.setConfigSender("com.google.common.base.CharMatcher$Invisible");
      assertEquals("6I4wyE)d+~|~W`.;Q", monitorConfiguration0.getKafkaTopic());
      assertEquals("EYFK*>k*\"o{QUR/nlu", monitorConfiguration0.getPackageName());
      assertEquals("com.google.common.base.CharMatcher$Invisible", monitorConfiguration0.getTimeStamp());
      assertEquals(":`_du_=<XB?=", monitorConfiguration0.getUrl());
      assertEquals("EYFK*>k*\"o{QUR/nlu", monitorConfiguration0.getKeywordExpression());
      assertEquals("com.google.common.base.CharMatcher$Invisible", monitorConfiguration0.getTimeSlot());
      assertEquals("com.google.common.base.Predicates$NotPredicate", monitorConfiguration0.getKafkaEndpoint());
      assertEquals((-2875L), monitorConfiguration0.getMonitorManagerId());
      assertEquals("dNiyy~WqR|uH?05VM?@", monitorConfiguration0.getAppId());
      assertEquals("", monitorConfiguration0.getState());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      String string0 = monitorConfiguration0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, "W#SB;4sKH~sbp", "", "", "", "com.google.common.collect.AbstractMultimap", "W#SB;4sKH~sbp", "com.google.common.collect.AbstractMultimap", "com.google.common.collect.AbstractMultimap", "", "com.google.common.collect.AbstractMultimap");
      String string0 = monitorConfiguration0.getKeywordExpression();
      assertEquals("", monitorConfiguration0.getAppId());
      assertEquals("com.google.common.collect.AbstractMultimap", string0);
      assertEquals("com.google.common.collect.AbstractMultimap", monitorConfiguration0.getPackageName());
      assertEquals("", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("W#SB;4sKH~sbp", monitorConfiguration0.getConfigSender());
      assertEquals("W#SB;4sKH~sbp", monitorConfiguration0.getState());
      assertEquals("", monitorConfiguration0.getTimeSlot());
      assertEquals("com.google.common.collect.AbstractMultimap", monitorConfiguration0.getUrl());
      assertEquals("com.google.common.collect.AbstractMultimap", monitorConfiguration0.getKafkaTopic());
      assertEquals("", monitorConfiguration0.getTimeStamp());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      monitorConfiguration0.setAppId("h!%'y%");
      assertNull(monitorConfiguration0.getConfigSender());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      monitorConfiguration0.setState("");
      String string0 = monitorConfiguration0.getState();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      String string0 = monitorConfiguration0.getTimeStamp();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      monitorConfiguration0.getMethod();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<MonitorConfiguration> linkedList0 = new LinkedList<MonitorConfiguration>();
      MonitorType monitorType0 = new MonitorType("");
      MonitorTool monitorTool0 = new MonitorTool("", linkedList0, monitorType0, "?zO");
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, ";gE$t7sP$>y`5~*qk*", "nE5/^e\"6:`R", "nE5/^e\"6:`R", "?zO", "OH+hWANgMpQa", "nE5/^e\"6:`R", "", "=", "=", "");
      String string0 = monitorConfiguration0.getKafkaTopic();
      assertEquals("=", monitorConfiguration0.getPackageName());
      assertEquals("OH+hWANgMpQa", string0);
      assertEquals("", monitorConfiguration0.getUrl());
      assertEquals("?zO", monitorConfiguration0.getKafkaEndpoint());
      assertEquals(";gE$t7sP$>y`5~*qk*", monitorConfiguration0.getConfigSender());
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getTimeSlot());
      assertEquals("=", monitorConfiguration0.getAppId());
      assertEquals("", monitorConfiguration0.getKeywordExpression());
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getState());
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getTimeStamp());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      monitorConfiguration0.setId(917L);
      long long0 = monitorConfiguration0.getId();
      assertEquals(917L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      monitorConfiguration0.setKeywordExpression("h!%'y%");
      assertNull(monitorConfiguration0.getTimeStamp());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      String string0 = monitorConfiguration0.getConfigSender();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      String string0 = monitorConfiguration0.getPackageName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, "jv*", "jv*", "jv*", (String) null, (String) null, "", "", "", "", "jv*");
      String string0 = monitorConfiguration0.getAppId();
      assertNotNull(string0);
      assertEquals("", monitorConfiguration0.getKeywordExpression());
      assertEquals("", monitorConfiguration0.getPackageName());
      assertEquals("jv*", monitorConfiguration0.getTimeSlot());
      assertEquals("jv*", monitorConfiguration0.getUrl());
      assertEquals("jv*", monitorConfiguration0.getConfigSender());
      assertEquals("jv*", monitorConfiguration0.getTimeStamp());
      assertEquals("", monitorConfiguration0.getState());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      String string0 = monitorConfiguration0.getAppId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Method method0 = Method.GET;
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration((MonitorTool) null, (-4137L), "", "", "kAC@! K(yNk*pdqr", "", (String) null, "g}", "", "Funnels.longFunnel()", "", "", method0);
      String string0 = monitorConfiguration0.getConfigSender();
      assertEquals("", monitorConfiguration0.getUrl());
      assertEquals("", monitorConfiguration0.getAppId());
      assertEquals("", monitorConfiguration0.getTimeStamp());
      assertEquals((-4137L), monitorConfiguration0.getMonitorManagerId());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("Funnels.longFunnel()", monitorConfiguration0.getPackageName());
      assertEquals("g}", monitorConfiguration0.getState());
      assertEquals("", monitorConfiguration0.getKeywordExpression());
      assertEquals("", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("kAC@! K(yNk*pdqr", monitorConfiguration0.getTimeSlot());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<MonitorConfiguration> arrayList0 = new ArrayList<MonitorConfiguration>();
      MonitorType monitorType0 = new MonitorType();
      MonitorTool monitorTool0 = new MonitorTool(",v|@_P|qpxzRB4XZ+6", arrayList0, monitorType0, ",v|@_P|qpxzRB4XZ+6");
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, "+~v+tW", "/djDthcW}G", "/djDthcW}G", "", "r5|Tx/mDW1R!V", "com.google.common.base.CharMatcher$AnyOf", "/djDthcW}G", "/djDthcW}G", "kv,Ph3t", "com.google.common.base.CharMatcher$AnyOf");
      String string0 = monitorConfiguration0.getConfigSender();
      assertEquals("/djDthcW}G", monitorConfiguration0.getTimeStamp());
      assertEquals("com.google.common.base.CharMatcher$AnyOf", monitorConfiguration0.getState());
      assertEquals("com.google.common.base.CharMatcher$AnyOf", monitorConfiguration0.getUrl());
      assertEquals("r5|Tx/mDW1R!V", monitorConfiguration0.getKafkaTopic());
      assertEquals("", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("kv,Ph3t", monitorConfiguration0.getAppId());
      assertEquals("/djDthcW}G", monitorConfiguration0.getTimeSlot());
      assertEquals("/djDthcW}G", monitorConfiguration0.getKeywordExpression());
      assertEquals("+~v+tW", string0);
      assertEquals("/djDthcW}G", monitorConfiguration0.getPackageName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      monitorConfiguration0.setId((-1077L));
      long long0 = monitorConfiguration0.getId();
      assertEquals((-1077L), long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      Method method0 = Method.GET;
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, (-3432L), "", "", "", "", "", "%a@aii", "", "Functions.constant(", "", "%a@aii", method0);
      String string0 = monitorConfiguration0.getKafkaEndpoint();
      assertEquals("Functions.constant(", monitorConfiguration0.getPackageName());
      assertEquals("", monitorConfiguration0.getKeywordExpression());
      assertEquals("", monitorConfiguration0.getTimeSlot());
      assertEquals((-3432L), monitorConfiguration0.getMonitorManagerId());
      assertEquals("", monitorConfiguration0.getAppId());
      assertEquals("", monitorConfiguration0.getConfigSender());
      assertEquals("", monitorConfiguration0.getTimeStamp());
      assertEquals("", string0);
      assertEquals("", monitorConfiguration0.getKafkaTopic());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stack<MonitorConfiguration> stack0 = new Stack<MonitorConfiguration>();
      MonitorType monitorType0 = new MonitorType();
      MonitorTool monitorTool0 = new MonitorTool("SKP-bJd$s:v92R9Fb=", stack0, monitorType0, "SKP-bJd$s:v92R9Fb=");
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, "SKP-bJd$s:v92R9Fb=", "SKP-bJd$s:v92R9Fb=", "", "eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", "SKP-bJd$s:v92R9Fb=", "eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", "IBrtVnyrfRWvkD", "eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", "Illegal alphabet ", "SKP-bJd$s:v92R9Fb=");
      String string0 = monitorConfiguration0.getKafkaEndpoint();
      assertEquals("Illegal alphabet ", monitorConfiguration0.getAppId());
      assertEquals("SKP-bJd$s:v92R9Fb=", monitorConfiguration0.getKafkaTopic());
      assertEquals("eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", monitorConfiguration0.getState());
      assertEquals("SKP-bJd$s:v92R9Fb=", monitorConfiguration0.getConfigSender());
      assertEquals("", monitorConfiguration0.getTimeSlot());
      assertEquals("eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", string0);
      assertEquals("eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", monitorConfiguration0.getPackageName());
      assertEquals("SKP-bJd$s:v92R9Fb=", monitorConfiguration0.getTimeStamp());
      assertEquals("SKP-bJd$s:v92R9Fb=", monitorConfiguration0.getUrl());
      assertEquals("IBrtVnyrfRWvkD", monitorConfiguration0.getKeywordExpression());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      monitorConfiguration0.setKafkaTopic("");
      String string0 = monitorConfiguration0.getKafkaTopic();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      String string0 = monitorConfiguration0.getKafkaTopic();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      Method method0 = Method.GET;
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, (-3432L), "", "", "", "", "", "%a@aii", "", "Functions.constant(", "", "%a@aii", method0);
      String string0 = monitorConfiguration0.getKeywordExpression();
      assertEquals("", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("", monitorConfiguration0.getKafkaTopic());
      assertEquals("", monitorConfiguration0.getConfigSender());
      assertEquals("", monitorConfiguration0.getTimeStamp());
      assertEquals("", monitorConfiguration0.getAppId());
      assertEquals("", monitorConfiguration0.getTimeSlot());
      assertEquals("", string0);
      assertEquals("Functions.constant(", monitorConfiguration0.getPackageName());
      assertEquals((-3432L), monitorConfiguration0.getMonitorManagerId());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      String string0 = monitorConfiguration0.getKeywordExpression();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      Method method0 = Method.GET;
      monitorConfiguration0.setMethod(method0);
      Method method1 = monitorConfiguration0.getMethod();
      assertSame(method1, method0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      monitorConfiguration0.setMonitorManagerId((-316L));
      long long0 = monitorConfiguration0.getMonitorManagerId();
      assertEquals((-316L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      Method method0 = Method.POST;
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, 1410L, "\"]i+", "\"]i+", "|S}#im]GQB", "gmW!n,LF~mMB1Xn3,", "Mu-ut@si2}g", "", "gmW!n,LF~mMB1Xn3,", "Mu-ut@si2}g", ";|.rWK4mIi", "", method0);
      long long0 = monitorConfiguration0.getMonitorManagerId();
      assertEquals("", monitorConfiguration0.getState());
      assertEquals("gmW!n,LF~mMB1Xn3,", monitorConfiguration0.getKeywordExpression());
      assertEquals("", monitorConfiguration0.getUrl());
      assertEquals("|S}#im]GQB", monitorConfiguration0.getTimeSlot());
      assertEquals("\"]i+", monitorConfiguration0.getTimeStamp());
      assertEquals(";|.rWK4mIi", monitorConfiguration0.getAppId());
      assertEquals("gmW!n,LF~mMB1Xn3,", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("Mu-ut@si2}g", monitorConfiguration0.getKafkaTopic());
      assertEquals("Mu-ut@si2}g", monitorConfiguration0.getPackageName());
      assertEquals("\"]i+", monitorConfiguration0.getConfigSender());
      assertEquals(1410L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      Method method0 = Method.GET;
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, (-2875L), "com.google.common.base.CharMatcher$Invisible", "com.google.common.base.CharMatcher$Invisible", "com.google.common.base.CharMatcher$Invisible", "com.google.common.base.Predicates$NotPredicate", "6I4wyE)d+~|~W`.;Q", "", "EYFK*>k*\"o{QUR/nlu", "EYFK*>k*\"o{QUR/nlu", "dNiyy~WqR|uH?05VM?@", ":`_du_=<XB?=", method0);
      monitorTool0.setId((-2042L));
      monitorConfiguration0.getMonitorTool();
      assertEquals((-2875L), monitorConfiguration0.getMonitorManagerId());
      assertEquals("com.google.common.base.CharMatcher$Invisible", monitorConfiguration0.getTimeStamp());
      assertEquals("com.google.common.base.CharMatcher$Invisible", monitorConfiguration0.getConfigSender());
      assertEquals("dNiyy~WqR|uH?05VM?@", monitorConfiguration0.getAppId());
      assertEquals("com.google.common.base.Predicates$NotPredicate", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("", monitorConfiguration0.getState());
      assertEquals("EYFK*>k*\"o{QUR/nlu", monitorConfiguration0.getPackageName());
      assertEquals("6I4wyE)d+~|~W`.;Q", monitorConfiguration0.getKafkaTopic());
      assertEquals("com.google.common.base.CharMatcher$Invisible", monitorConfiguration0.getTimeSlot());
      assertEquals(":`_du_=<XB?=", monitorConfiguration0.getUrl());
      assertEquals("EYFK*>k*\"o{QUR/nlu", monitorConfiguration0.getKeywordExpression());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<MonitorConfiguration> linkedList0 = new LinkedList<MonitorConfiguration>();
      MonitorType monitorType0 = new MonitorType("");
      MonitorTool monitorTool0 = new MonitorTool("", linkedList0, monitorType0, "?zO");
      monitorTool0.setId(1324L);
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, ";gE$t7sP$>y`5~*qk*", "nE5/^e\"6:`R", "nE5/^e\"6:`R", "?zO", "OH+hWANgMpQa", "nE5/^e\"6:`R", "", "=", "=", "");
      monitorConfiguration0.getMonitorTool();
      assertEquals("=", monitorConfiguration0.getAppId());
      assertEquals("OH+hWANgMpQa", monitorConfiguration0.getKafkaTopic());
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getTimeStamp());
      assertEquals("=", monitorConfiguration0.getPackageName());
      assertEquals("?zO", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getTimeSlot());
      assertEquals("nE5/^e\"6:`R", monitorConfiguration0.getState());
      assertEquals("", monitorConfiguration0.getKeywordExpression());
      assertEquals(";gE$t7sP$>y`5~*qk*", monitorConfiguration0.getConfigSender());
      assertEquals("", monitorConfiguration0.getUrl());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      MonitorTool monitorTool0 = monitorConfiguration0.getMonitorTool();
      assertNull(monitorTool0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<MonitorConfiguration> linkedList0 = new LinkedList<MonitorConfiguration>();
      MonitorType monitorType0 = new MonitorType();
      MonitorTool monitorTool0 = new MonitorTool((String) null, linkedList0, monitorType0, "L(Wx!x%5Y");
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, (String) null, "", (String) null, "", (String) null, "", "", "", (String) null, (String) null);
      String string0 = monitorConfiguration0.getPackageName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Method method0 = Method.GET;
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration((MonitorTool) null, (-4137L), "", "", "kAC@! K(yNk*pdqr", "", (String) null, "g}", "", "Funnels.longFunnel()", "", "", method0);
      String string0 = monitorConfiguration0.getPackageName();
      assertEquals("", monitorConfiguration0.getUrl());
      assertEquals("", monitorConfiguration0.getConfigSender());
      assertEquals("", monitorConfiguration0.getAppId());
      assertEquals("", monitorConfiguration0.getTimeStamp());
      assertEquals("", monitorConfiguration0.getKeywordExpression());
      assertEquals("g}", monitorConfiguration0.getState());
      assertEquals("", monitorConfiguration0.getKafkaEndpoint());
      assertNotNull(string0);
      assertEquals("kAC@! K(yNk*pdqr", monitorConfiguration0.getTimeSlot());
      assertEquals((-4137L), monitorConfiguration0.getMonitorManagerId());
      assertEquals("Funnels.longFunnel()", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      Method method0 = Method.POST;
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, (-1L), "{u#,P8 %L", "{u#,P8 %L", "{u#,P8 %L", "com.google.common.base.Functions$PredicateFunction", "{u#,P8 %L", "EClw", "", "EClw", "$N1?!jd#PwF", "com.google.common.base.Predicates$InPredicate", method0);
      String string0 = monitorConfiguration0.getState();
      assertEquals("EClw", string0);
      assertEquals("com.google.common.base.Functions$PredicateFunction", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("{u#,P8 %L", monitorConfiguration0.getConfigSender());
      assertEquals("{u#,P8 %L", monitorConfiguration0.getTimeStamp());
      assertEquals("{u#,P8 %L", monitorConfiguration0.getKafkaTopic());
      assertEquals("", monitorConfiguration0.getKeywordExpression());
      assertEquals((-1L), monitorConfiguration0.getMonitorManagerId());
      assertEquals("com.google.common.base.Predicates$InPredicate", monitorConfiguration0.getUrl());
      assertEquals("EClw", monitorConfiguration0.getPackageName());
      assertEquals("$N1?!jd#PwF", monitorConfiguration0.getAppId());
      assertEquals("{u#,P8 %L", monitorConfiguration0.getTimeSlot());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration();
      monitorConfiguration0.setTimeSlot("");
      String string0 = monitorConfiguration0.getTimeSlot();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, "jv*", "jv*", "jv*", (String) null, (String) null, "", "", "", "", "jv*");
      String string0 = monitorConfiguration0.getTimeSlot();
      assertEquals("", monitorConfiguration0.getAppId());
      assertEquals("jv*", monitorConfiguration0.getTimeStamp());
      assertEquals("", monitorConfiguration0.getState());
      assertEquals("", monitorConfiguration0.getPackageName());
      assertEquals("jv*", monitorConfiguration0.getConfigSender());
      assertNotNull(string0);
      assertEquals("", monitorConfiguration0.getKeywordExpression());
      assertEquals("jv*", string0);
      assertEquals("jv*", monitorConfiguration0.getUrl());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration((MonitorTool) null, (String) null, "", "", "owEvWCg?uxb.bq", "NON_EMPTY", "", "owEvWCg?uxb.bq", "owEvWCg?uxb.bq", "IoFB", (String) null);
      String string0 = monitorConfiguration0.getTimeStamp();
      assertEquals("", monitorConfiguration0.getTimeSlot());
      assertEquals("owEvWCg?uxb.bq", monitorConfiguration0.getPackageName());
      assertEquals("", string0);
      assertEquals("owEvWCg?uxb.bq", monitorConfiguration0.getKeywordExpression());
      assertEquals("", monitorConfiguration0.getState());
      assertEquals("owEvWCg?uxb.bq", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("NON_EMPTY", monitorConfiguration0.getKafkaTopic());
      assertNotNull(string0);
      assertEquals("IoFB", monitorConfiguration0.getAppId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      Method method0 = Method.POST;
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, (-1L), "{u#,P8 %L", "{u#,P8 %L", "{u#,P8 %L", "com.google.common.base.Functions$PredicateFunction", "{u#,P8 %L", "EClw", "", "EClw", "$N1?!jd#PwF", "com.google.common.base.Predicates$InPredicate", method0);
      String string0 = monitorConfiguration0.getTimeStamp();
      assertEquals("EClw", monitorConfiguration0.getPackageName());
      assertEquals("{u#,P8 %L", monitorConfiguration0.getTimeSlot());
      assertEquals("{u#,P8 %L", monitorConfiguration0.getKafkaTopic());
      assertEquals("{u#,P8 %L", string0);
      assertEquals("com.google.common.base.Predicates$InPredicate", monitorConfiguration0.getUrl());
      assertEquals("EClw", monitorConfiguration0.getState());
      assertEquals("", monitorConfiguration0.getKeywordExpression());
      assertEquals((-1L), monitorConfiguration0.getMonitorManagerId());
      assertEquals("com.google.common.base.Functions$PredicateFunction", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("{u#,P8 %L", monitorConfiguration0.getConfigSender());
      assertEquals("$N1?!jd#PwF", monitorConfiguration0.getAppId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MonitorTool monitorTool0 = new MonitorTool();
      Method method0 = Method.GET;
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, 0L, "", "", "", "UF8_CVCp", "", (String) null, "MonitorConfiguration[id=%d, monitorTool='%s', configSender='%s', timeStamp='%s', timeSlot='%s', kafkaEndpoint='%s', kafkaTopic='%s', state='%s', keywordExpression='%s', packageName='%s', appId='%s', url='%s']", "UF8_CVCp", "yBK", "yBK", method0);
      assertEquals("yBK", monitorConfiguration0.getUrl());
      
      monitorConfiguration0.setUrl("");
      monitorConfiguration0.getUrl();
      assertEquals("MonitorConfiguration[id=%d, monitorTool='%s', configSender='%s', timeStamp='%s', timeSlot='%s', kafkaEndpoint='%s', kafkaTopic='%s', state='%s', keywordExpression='%s', packageName='%s', appId='%s', url='%s']", monitorConfiguration0.getKeywordExpression());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Stack<MonitorConfiguration> stack0 = new Stack<MonitorConfiguration>();
      MonitorType monitorType0 = new MonitorType();
      MonitorTool monitorTool0 = new MonitorTool("SKP-bJd$s:v92R9Fb=", stack0, monitorType0, "SKP-bJd$s:v92R9Fb=");
      MonitorConfiguration monitorConfiguration0 = new MonitorConfiguration(monitorTool0, "SKP-bJd$s:v92R9Fb=", "SKP-bJd$s:v92R9Fb=", "", "eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", "SKP-bJd$s:v92R9Fb=", "eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", "IBrtVnyrfRWvkD", "eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", "Illegal alphabet ", "SKP-bJd$s:v92R9Fb=");
      String string0 = monitorConfiguration0.getUrl();
      assertEquals("Illegal alphabet ", monitorConfiguration0.getAppId());
      assertEquals("SKP-bJd$s:v92R9Fb=", monitorConfiguration0.getTimeStamp());
      assertEquals("eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", monitorConfiguration0.getPackageName());
      assertEquals("SKP-bJd$s:v92R9Fb=", monitorConfiguration0.getKafkaTopic());
      assertEquals("", monitorConfiguration0.getTimeSlot());
      assertEquals("IBrtVnyrfRWvkD", monitorConfiguration0.getKeywordExpression());
      assertEquals("eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", monitorConfiguration0.getKafkaEndpoint());
      assertEquals("SKP-bJd$s:v92R9Fb=", string0);
      assertEquals("eu.supersede.integration.api.feedback.orchestrator.types.MonitorConfiguration", monitorConfiguration0.getState());
      assertEquals("SKP-bJd$s:v92R9Fb=", monitorConfiguration0.getConfigSender());
  }
}
