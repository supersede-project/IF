/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:47:32 GMT 2019
 */

package eu.supersede.integration.api.feedback.orchestrator.types.serialization;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import eu.supersede.integration.api.feedback.orchestrator.types.serialization.ParameterValueSerializer;
import java.io.DataOutput;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.Writer;
import java.net.URI;
import java.util.Locale;
import javax.swing.Box;
import javax.swing.DebugGraphics;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.springframework.core.io.PathResource;

public class ParameterValueSerializer_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParameterValueSerializer parameterValueSerializer0 = new ParameterValueSerializer();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) objectOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      parameterValueSerializer0.serialize("true", jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(4, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParameterValueSerializer parameterValueSerializer0 = new ParameterValueSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        parameterValueSerializer0.serialize("false", (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParameterValueSerializer parameterValueSerializer0 = new ParameterValueSerializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      jsonGenerator0.writeStartObject();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        parameterValueSerializer0.serialize("JSON", jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name (context: Object)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParameterValueSerializer parameterValueSerializer0 = new ParameterValueSerializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) pipedWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        parameterValueSerializer0.serialize("4H.}LSLh/@4_", (JsonGenerator) filteringGeneratorDelegate0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParameterValueSerializer parameterValueSerializer0 = new ParameterValueSerializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        parameterValueSerializer0.serialize("moduleVersion", (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParameterValueSerializer parameterValueSerializer0 = new ParameterValueSerializer();
      PrintStream printStream0 = DebugGraphics.logStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, printStream0, true);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0, byteArray0, 56319, true);
      // Undeclared exception!
      try { 
        parameterValueSerializer0.serialize("6w^K", (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParameterValueSerializer parameterValueSerializer0 = new ParameterValueSerializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Box box0 = new Box(3);
      Locale locale0 = box0.getLocale();
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      URI uRI0 = MockURI.aFileURI;
      PathResource pathResource0 = new PathResource(uRI0);
      OutputStream outputStream0 = pathResource0.getOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 352, objectReader0, outputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        parameterValueSerializer0.serialize("true", (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented for ObjectReader
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ParameterValueSerializer parameterValueSerializer0 = new ParameterValueSerializer();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      PrintStream printStream0 = DebugGraphics.logStream();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory_Feature0, true);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0, byteArray0, 1, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      parameterValueSerializer0.serialize("^1OfAT2aYg96q&", (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
  }
}
