/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:25:40 GMT 2019
 */

package eu.supersede.integration.api.replan.controller.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.replan.controller.types.FeatureWP3;
import eu.supersede.integration.api.replan.controller.types.Priority;
import eu.supersede.integration.api.replan.controller.types.Property;
import eu.supersede.integration.api.replan.controller.types.SoftDependency;
import java.util.List;
import java.util.Stack;
import java.util.Vector;

public class FeatureWP3_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      Priority priority0 = featureWP3_0.getPriority();
      featureWP3_0.setPriority(priority0);
      assertNull(featureWP3_0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      String string0 = featureWP3_0.getArguments();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      featureWP3_0.setRequiredSkills((List<Property>) null);
      List<Property> list0 = featureWP3_0.getProperties();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      Double double0 = featureWP3_0.getEffort();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      featureWP3_0.setSoftDependencies((List<SoftDependency>) null);
      List<SoftDependency> list0 = featureWP3_0.getSoftDependencies();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      Double double0 = new Double(1619.33891);
      featureWP3_0.setEffort(double0);
      Double double1 = featureWP3_0.getEffort();
      assertEquals(1619.33891, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      List<Property> list0 = featureWP3_0.getProperties();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      featureWP3_0.setHardDependencies((List<Integer>) null);
      List<Integer> list0 = featureWP3_0.getHardDependencies();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      List<SoftDependency> list0 = featureWP3_0.getSoftDependencies();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      featureWP3_0.setArguments("");
      String string0 = featureWP3_0.getArguments();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      featureWP3_0.setArguments("nG3x4z:3-wQ.4M:\u0004l");
      String string0 = featureWP3_0.getArguments();
      assertEquals("nG3x4z:3-wQ.4M:\u0004l", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      Double double0 = new Double((-3719.1413684));
      featureWP3_0.setEffort(double0);
      Double double1 = featureWP3_0.getEffort();
      assertEquals((-3719.1413684), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      Double double0 = new Double(0.0);
      featureWP3_0.setEffort(double0);
      Double double1 = featureWP3_0.getEffort();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-1266));
      vector0.add(integer0);
      featureWP3_0.setHardDependencies(vector0);
      List<Integer> list0 = featureWP3_0.getHardDependencies();
      assertTrue(list0.contains((-1266)));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      Priority priority0 = Priority.TWO;
      featureWP3_0.setPriority(priority0);
      Priority priority1 = featureWP3_0.getPriority();
      assertSame(priority1, priority0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      Vector<Property> vector0 = new Vector<Property>();
      Property property0 = new Property();
      vector0.add(property0);
      featureWP3_0.setRequiredSkills(vector0);
      List<Property> list0 = featureWP3_0.getProperties();
      assertTrue(list0.contains(property0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FeatureWP3 featureWP3_0 = new FeatureWP3();
      Stack<SoftDependency> stack0 = new Stack<SoftDependency>();
      SoftDependency softDependency0 = new SoftDependency();
      stack0.add(softDependency0);
      featureWP3_0.setSoftDependencies(stack0);
      List<SoftDependency> list0 = featureWP3_0.getSoftDependencies();
      assertTrue(list0.contains(softDependency0));
  }
}
