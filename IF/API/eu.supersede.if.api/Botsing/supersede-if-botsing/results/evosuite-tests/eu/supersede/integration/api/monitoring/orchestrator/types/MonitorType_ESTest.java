/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:20:42 GMT 2019
 */

package eu.supersede.integration.api.monitoring.orchestrator.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.monitoring.orchestrator.types.MonitorTool;
import eu.supersede.integration.api.monitoring.orchestrator.types.MonitorType;
import java.util.List;
import java.util.Stack;
import java.util.Vector;

public class MonitorType_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MonitorType monitorType0 = new MonitorType();
      monitorType0.setName("[>Y0Y1HZj");
      String string0 = monitorType0.getName();
      assertEquals("[>Y0Y1HZj", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MonitorType monitorType0 = new MonitorType();
      Integer integer0 = new Integer(0);
      monitorType0.setId(integer0);
      Integer integer1 = monitorType0.getId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MonitorType monitorType0 = new MonitorType();
      List<MonitorTool> list0 = monitorType0.getMonitorTools();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MonitorType monitorType0 = new MonitorType();
      String string0 = monitorType0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MonitorType monitorType0 = new MonitorType();
      Integer integer0 = monitorType0.getId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MonitorType monitorType0 = new MonitorType();
      Integer integer0 = new Integer((-2710));
      monitorType0.setId(integer0);
      Integer integer1 = monitorType0.getId();
      assertEquals((-2710), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MonitorType monitorType0 = new MonitorType();
      Integer integer0 = new Integer(127);
      monitorType0.setId(integer0);
      Integer integer1 = monitorType0.getId();
      assertEquals(127, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MonitorType monitorType0 = new MonitorType();
      Vector<MonitorTool> vector0 = new Vector<MonitorTool>();
      monitorType0.setMonitorTools(vector0);
      MonitorTool monitorTool0 = new MonitorTool();
      vector0.add(monitorTool0);
      List<MonitorTool> list0 = monitorType0.getMonitorTools();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MonitorType monitorType0 = new MonitorType();
      Stack<MonitorTool> stack0 = new Stack<MonitorTool>();
      monitorType0.setMonitorTools(stack0);
      List<MonitorTool> list0 = monitorType0.getMonitorTools();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MonitorType monitorType0 = new MonitorType();
      monitorType0.setName("");
      String string0 = monitorType0.getName();
      assertEquals("", string0);
  }
}
