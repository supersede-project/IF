/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:17:52 GMT 2019
 */

package eu.supersede.integration.api.dm.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.dm.types.Condition;
import eu.supersede.integration.api.dm.types.DataID;
import eu.supersede.integration.api.dm.types.Operator;

public class Condition_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DataID dataID0 = DataID.UNSPECIFIED;
      Operator operator0 = Operator.EQ;
      Double double0 = new Double((-1.0));
      Condition condition0 = new Condition(dataID0, operator0, double0);
      Double double1 = condition0.getValue();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Condition condition0 = new Condition();
      condition0.getOperator();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Condition condition0 = new Condition();
      condition0.getIdMonitoredData();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DataID dataID0 = DataID.UNSPECIFIED;
      Operator operator0 = Operator.Diff;
      Double double0 = new Double(632.97980347);
      Condition condition0 = new Condition(dataID0, operator0, double0);
      DataID dataID1 = condition0.getIdMonitoredData();
      assertSame(dataID1, dataID0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DataID dataID0 = DataID.UNSPECIFIED;
      Operator operator0 = Operator.LT;
      Double double0 = new Double(0.0);
      Condition condition0 = new Condition(dataID0, operator0, double0);
      Operator operator1 = condition0.getOperator();
      assertEquals(Operator.LT, operator1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Condition condition0 = new Condition();
      Double double0 = condition0.getValue();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DataID dataID0 = DataID.UNSPECIFIED;
      Operator operator0 = Operator.Diff;
      Double double0 = new Double(632.97980347);
      Condition condition0 = new Condition(dataID0, operator0, double0);
      Double double1 = condition0.getValue();
      assertEquals(632.97980347, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Condition condition0 = new Condition();
      Double double0 = new Double(0.0);
      condition0.value = double0;
      Double double1 = condition0.getValue();
      assertEquals(0.0, (double)double1, 0.01);
  }
}
