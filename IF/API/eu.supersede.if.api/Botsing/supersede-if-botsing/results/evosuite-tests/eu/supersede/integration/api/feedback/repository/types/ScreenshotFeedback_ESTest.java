/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:57:10 GMT 2019
 */

package eu.supersede.integration.api.feedback.repository.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.feedback.orchestrator.types.ConfigurationMechanism;
import eu.supersede.integration.api.feedback.orchestrator.types.Mechanism;
import eu.supersede.integration.api.feedback.orchestrator.types.MechanismType;
import eu.supersede.integration.api.feedback.orchestrator.types.Parameter;
import eu.supersede.integration.api.feedback.repository.types.ScreenshotFeedback;
import eu.supersede.integration.api.feedback.repository.types.TextAnnotation;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.mock.java.util.MockDate;

public class ScreenshotFeedback_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback("loadExceptionCount", 2026, "loadExceptionCount", "loadExceptionCount", 2026, (List<TextAnnotation>) null);
      screenshotFeedback0.getId();
      assertEquals(2026, screenshotFeedback0.getSize());
      assertEquals(2026L, screenshotFeedback0.getMechanismId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<TextAnnotation> stack0 = new Stack<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback("", 31, "", "", 31, stack0);
      screenshotFeedback0.getFileExtension();
      assertEquals(31L, screenshotFeedback0.getMechanismId());
      assertEquals(31, screenshotFeedback0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<TextAnnotation> arrayList0 = new ArrayList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback(3240L, arrayList0);
      long long0 = screenshotFeedback0.getMechanismId();
      assertEquals(3240L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<TextAnnotation> linkedList0 = new LinkedList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback((-9223372036854775808L), linkedList0);
      screenshotFeedback0.getMechanism();
      assertEquals((-9223372036854775808L), screenshotFeedback0.getMechanismId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      Stack<TextAnnotation> stack0 = new Stack<TextAnnotation>();
      screenshotFeedback0.setTextAnnotations(stack0);
      List<TextAnnotation> list0 = screenshotFeedback0.getTextAnnotations();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      String string0 = screenshotFeedback0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<TextAnnotation> linkedList0 = new LinkedList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback((-9223372036854775808L), linkedList0);
      String string0 = screenshotFeedback0.toString();
      assertEquals("ScreenshotFeedback[id=0, mechanismId='-9223372036854775808', path='null', fileExtension='null']", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      int int0 = screenshotFeedback0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<TextAnnotation> linkedList0 = new LinkedList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback("", 309, "", "eu.supersede.integration.api.feedback.repository.types.ScreenshotFeedback", 309, linkedList0);
      screenshotFeedback0.setId((-491L));
      assertEquals((-491L), screenshotFeedback0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<TextAnnotation> linkedList0 = new LinkedList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback("", (-491L), linkedList0);
      assertEquals((-491L), screenshotFeedback0.getMechanismId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<TextAnnotation> linkedList0 = new LinkedList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback((-9223372036854775808L), linkedList0);
      screenshotFeedback0.setPart("ScreenshotFeedback[id=0, mechanismId='-9223372036854775808', path='ScreenshotFeedback[id=%d, mechanismId='%d', path='%s', fileExtension='%s']', fileExtension='null']");
      assertEquals((-9223372036854775808L), screenshotFeedback0.getMechanismId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<TextAnnotation> linkedList0 = new LinkedList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback((-9223372036854775808L), linkedList0);
      screenshotFeedback0.getTextAnnotations();
      assertEquals((-9223372036854775808L), screenshotFeedback0.getMechanismId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<TextAnnotation> stack0 = new Stack<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback("", 31, "", "", 31, stack0);
      screenshotFeedback0.getPart();
      assertEquals(31L, screenshotFeedback0.getMechanismId());
      assertEquals(31, screenshotFeedback0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<TextAnnotation> arrayList0 = new ArrayList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback((String) null, (-2463), "1madzUc[lD0qH1tVZCd", (String) null, 2147483647L, arrayList0);
      screenshotFeedback0.setFileExtension("@u8Lj`HI!nb");
      screenshotFeedback0.getFileExtension();
      assertEquals(2147483647L, screenshotFeedback0.getMechanismId());
      assertEquals((-2463), screenshotFeedback0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      String string0 = screenshotFeedback0.getFileExtension();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback("ScreenshotFeedback[id=%d, mechanismId='%d', path='%s', fileExtension='%s']", 6, "ScreenshotFeedback[id=%d, mechanismId='%d', path='%s', fileExtension='%s']", "/-6y`#*Gl2", 9223372036854775807L, (List<TextAnnotation>) null);
      screenshotFeedback0.id = (-277L);
      long long0 = screenshotFeedback0.getId();
      assertEquals((-277L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback("loadExceptionCount", 2026, "loadExceptionCount", "loadExceptionCount", 2026, (List<TextAnnotation>) null);
      screenshotFeedback0.id = (long) 2026;
      long long0 = screenshotFeedback0.getId();
      assertEquals(2026L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<TextAnnotation> linkedList0 = new LinkedList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback((-9223372036854775808L), linkedList0);
      MechanismType mechanismType0 = MechanismType.TEXT_TYPE;
      ArrayList<ConfigurationMechanism> arrayList0 = new ArrayList<ConfigurationMechanism>();
      Stack<Parameter> stack0 = new Stack<Parameter>();
      Mechanism mechanism0 = new Mechanism(mechanismType0, (Date) null, (Date) null, arrayList0, stack0);
      mechanism0.setId((-1086L));
      screenshotFeedback0.setMechanism(mechanism0);
      screenshotFeedback0.getMechanism();
      assertEquals((-9223372036854775808L), screenshotFeedback0.getMechanismId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<TextAnnotation> linkedList0 = new LinkedList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback("", 309, "", "eu.supersede.integration.api.feedback.repository.types.ScreenshotFeedback", 309, linkedList0);
      Mechanism mechanism0 = new Mechanism();
      mechanism0.setId(309);
      screenshotFeedback0.setMechanism(mechanism0);
      screenshotFeedback0.getMechanism();
      assertEquals("", screenshotFeedback0.getPath());
      assertEquals("", screenshotFeedback0.getPart());
      assertEquals("eu.supersede.integration.api.feedback.repository.types.ScreenshotFeedback", screenshotFeedback0.getFileExtension());
      assertEquals(309L, screenshotFeedback0.getMechanismId());
      assertEquals(309, screenshotFeedback0.getSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      Mechanism mechanism0 = new Mechanism();
      mechanism0.setOrder((-1300));
      screenshotFeedback0.setMechanism(mechanism0);
      Mechanism mechanism1 = screenshotFeedback0.getMechanism();
      assertFalse(mechanism1.isActive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      Mechanism mechanism0 = new Mechanism();
      mechanism0.setOrder(1022);
      screenshotFeedback0.setMechanism(mechanism0);
      Mechanism mechanism1 = screenshotFeedback0.getMechanism();
      assertNull(mechanism1.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      MechanismType mechanismType0 = MechanismType.RATING_TYPE;
      MockDate mockDate0 = new MockDate(3751, (-2312), 3, 3, 3);
      Vector<ConfigurationMechanism> vector0 = new Vector<ConfigurationMechanism>();
      Vector<Parameter> vector1 = new Vector<Parameter>();
      Mechanism mechanism0 = new Mechanism(mechanismType0, mockDate0, mockDate0, vector0, vector1);
      mechanism0.setActive(true);
      screenshotFeedback0.setMechanism(mechanism0);
      Mechanism mechanism1 = screenshotFeedback0.getMechanism();
      assertTrue(mechanism1.isActive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<TextAnnotation> linkedHashSet0 = new LinkedHashSet<TextAnnotation>();
      ArrayList<TextAnnotation> arrayList0 = new ArrayList<TextAnnotation>(linkedHashSet0);
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback("", 1029, "", "", (-408L), arrayList0);
      long long0 = screenshotFeedback0.getMechanismId();
      assertEquals((-408L), long0);
      assertEquals(1029, screenshotFeedback0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Stack<TextAnnotation> stack0 = new Stack<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback(0L, stack0);
      long long0 = screenshotFeedback0.getMechanismId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<TextAnnotation> arrayList0 = new ArrayList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback((String) null, (-2463), "1madzUc[lD0qH1tVZCd", (String) null, 2147483647L, arrayList0);
      String string0 = screenshotFeedback0.getPart();
      assertEquals((-2463), screenshotFeedback0.getSize());
      assertEquals(2147483647L, screenshotFeedback0.getMechanismId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<TextAnnotation> arrayList0 = new ArrayList<TextAnnotation>();
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback((-9223372036854775808L), arrayList0);
      screenshotFeedback0.getPart();
      assertEquals((-9223372036854775808L), screenshotFeedback0.getMechanismId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      screenshotFeedback0.setPath("");
      String string0 = screenshotFeedback0.getPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      screenshotFeedback0.setPath("/okS,';`w5  C,uO&pB");
      String string0 = screenshotFeedback0.getPath();
      assertEquals("/okS,';`w5  C,uO&pB", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      screenshotFeedback0.setSize((-1));
      int int0 = screenshotFeedback0.getSize();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<TextAnnotation> linkedHashSet0 = new LinkedHashSet<TextAnnotation>();
      ArrayList<TextAnnotation> arrayList0 = new ArrayList<TextAnnotation>(linkedHashSet0);
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback("", 1029, "", "", (-408L), arrayList0);
      int int0 = screenshotFeedback0.getSize();
      assertEquals(1029, int0);
      assertEquals((-408L), screenshotFeedback0.getMechanismId());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector<TextAnnotation> vector0 = new Vector<TextAnnotation>();
      TextAnnotation textAnnotation0 = new TextAnnotation();
      vector0.add(textAnnotation0);
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback(0L, vector0);
      List<TextAnnotation> list0 = screenshotFeedback0.getTextAnnotations();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      List<TextAnnotation> list0 = screenshotFeedback0.getTextAnnotations();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ScreenshotFeedback screenshotFeedback0 = new ScreenshotFeedback();
      screenshotFeedback0.setMechanismId(2624L);
      assertEquals(2624L, screenshotFeedback0.getMechanismId());
  }
}
