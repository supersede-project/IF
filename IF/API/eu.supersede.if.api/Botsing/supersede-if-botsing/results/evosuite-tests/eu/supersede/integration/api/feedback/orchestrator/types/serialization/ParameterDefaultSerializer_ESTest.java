/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:40:46 GMT 2019
 */

package eu.supersede.integration.api.feedback.orchestrator.types.serialization;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import eu.supersede.integration.api.feedback.orchestrator.types.Parameter;
import eu.supersede.integration.api.feedback.orchestrator.types.serialization.ParameterDefaultSerializer;
import java.io.IOException;
import java.io.PipedOutputStream;

public class ParameterDefaultSerializer_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ParameterDefaultSerializer parameterDefaultSerializer0 = new ParameterDefaultSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      Parameter parameter0 = new Parameter();
      try { 
        parameterDefaultSerializer0.serialize(parameter0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParameterDefaultSerializer parameterDefaultSerializer0 = null;
      try {
        parameterDefaultSerializer0 = new ParameterDefaultSerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      ParameterDefaultSerializer parameterDefaultSerializer0 = new ParameterDefaultSerializer(jsonSerializer0);
      Parameter parameter0 = new Parameter();
      // Undeclared exception!
      try { 
        parameterDefaultSerializer0.serialize(parameter0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      ParameterDefaultSerializer parameterDefaultSerializer0 = new ParameterDefaultSerializer(jsonSerializer0);
      Parameter parameter0 = new Parameter();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, objectReader0, pipedOutputStream0);
      parameterDefaultSerializer0.serialize(parameter0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
  }
}
