/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:42:50 GMT 2019
 */

package eu.supersede.integration.api.replan.optimizer.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.replan.optimizer.types.Resource;
import eu.supersede.integration.api.replan.optimizer.types.Skill;
import java.util.List;
import java.util.Stack;

public class Resource_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Resource resource0 = new Resource();
      resource0.setName("");
      String string0 = resource0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Resource resource0 = new Resource();
      String string0 = resource0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Resource resource0 = new Resource();
      Double double0 = resource0.getAvailability();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Resource resource0 = new Resource();
      resource0.setSkills((List<Skill>) null);
      List<Skill> list0 = resource0.getSkills();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Resource resource0 = new Resource();
      Double double0 = new Double((-1355.0));
      resource0.setAvailability(double0);
      Double double1 = resource0.getAvailability();
      assertEquals((-1355.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Resource resource0 = new Resource();
      Double double0 = new Double(1996.5668745);
      resource0.setAvailability(double0);
      Double double1 = resource0.getAvailability();
      assertEquals(1996.5668745, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Resource resource0 = new Resource();
      Double double0 = new Double(0.0);
      resource0.setAvailability(double0);
      Double double1 = resource0.getAvailability();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Resource resource0 = new Resource();
      resource0.setName("F]=]dGi}TZK*1b]2q4");
      String string0 = resource0.getName();
      assertEquals("F]=]dGi}TZK*1b]2q4", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Resource resource0 = new Resource();
      Stack<Skill> stack0 = new Stack<Skill>();
      stack0.add((Skill) null);
      resource0.setSkills(stack0);
      List<Skill> list0 = resource0.getSkills();
      assertFalse(list0.isEmpty());
  }
}
