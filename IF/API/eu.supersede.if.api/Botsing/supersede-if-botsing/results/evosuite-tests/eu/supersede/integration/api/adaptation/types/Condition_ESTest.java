/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 09:57:36 GMT 2019
 */

package eu.supersede.integration.api.adaptation.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.adaptation.types.Condition;
import eu.supersede.integration.api.adaptation.types.DataID;
import eu.supersede.integration.api.adaptation.types.Operator;

public class Condition_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Condition condition0 = new Condition();
      DataID dataID0 = new DataID();
      condition0.setIdMonitoredData(dataID0);
      assertNull(condition0.getValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Condition condition0 = new Condition();
      Operator operator0 = Operator.LT;
      condition0.setOperator(operator0);
      assertNull(condition0.getValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Condition condition0 = new Condition();
      condition0.getOperator();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Condition condition0 = new Condition();
      Double double0 = condition0.getValue();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Condition condition0 = new Condition();
      DataID dataID0 = condition0.getIdMonitoredData();
      assertNull(dataID0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DataID dataID0 = new DataID("LT", "LT");
      Operator operator0 = Operator.LEq;
      Double double0 = new Double((-1.0));
      Condition condition0 = new Condition(dataID0, operator0, double0);
      DataID dataID1 = condition0.getIdMonitoredData();
      assertEquals("LT", dataID1.getNameComponent());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DataID dataID0 = new DataID("LT", "LT");
      Operator operator0 = Operator.LEq;
      Double double0 = new Double((-1.0));
      Condition condition0 = new Condition(dataID0, operator0, double0);
      Operator operator1 = condition0.getOperator();
      assertSame(operator1, operator0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Condition condition0 = new Condition();
      Double double0 = new Double((-450.155157444));
      condition0.value = double0;
      Double double1 = condition0.getValue();
      assertEquals((-450.155157444), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DataID dataID0 = new DataID("([h", "/VOGN'n9aYkra8)");
      Operator operator0 = Operator.LEq;
      Double double0 = new Double(260.389776);
      Condition condition0 = new Condition(dataID0, operator0, double0);
      Double double1 = condition0.getValue();
      assertEquals(260.389776, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Condition condition0 = new Condition();
      Double double0 = Double.valueOf(0.0);
      condition0.setValue(double0);
      Double double1 = condition0.getValue();
      assertEquals(0.0, (double)double1, 0.01);
  }
}
