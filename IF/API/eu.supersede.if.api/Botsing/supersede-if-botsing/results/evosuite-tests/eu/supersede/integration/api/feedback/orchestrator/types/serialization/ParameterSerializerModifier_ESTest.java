/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:44:53 GMT 2019
 */

package eu.supersede.integration.api.feedback.orchestrator.types.serialization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.type.SimpleType;
import eu.supersede.integration.api.feedback.orchestrator.types.Parameter;
import eu.supersede.integration.api.feedback.orchestrator.types.serialization.ParameterSerializerModifier;
import javax.swing.JInternalFrame;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class ParameterSerializerModifier_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParameterSerializerModifier parameterSerializerModifier0 = new ParameterSerializerModifier();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<Parameter> class0 = Parameter.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations((MapperConfig<?>) null, simpleType0, (ClassIntrospector.MixInResolver) null);
      // Undeclared exception!
      try { 
        parameterSerializerModifier0.modifySerializer((SerializationConfig) null, basicBeanDescription0, (JsonSerializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParameterSerializerModifier parameterSerializerModifier0 = new ParameterSerializerModifier();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        parameterSerializerModifier0.modifySerializer((SerializationConfig) null, basicBeanDescription0, (JsonSerializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParameterSerializerModifier parameterSerializerModifier0 = new ParameterSerializerModifier();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<Parameter> class0 = Parameter.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations((MapperConfig<?>) null, simpleType0, (ClassIntrospector.MixInResolver) null);
      JsonSerializer<JInternalFrame> jsonSerializer0 = (JsonSerializer<JInternalFrame>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonSerializer<?> jsonSerializer1 = parameterSerializerModifier0.modifySerializer((SerializationConfig) null, basicBeanDescription0, jsonSerializer0);
      assertFalse(jsonSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParameterSerializerModifier parameterSerializerModifier0 = new ParameterSerializerModifier();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations((MapperConfig<?>) null, simpleType0, (ClassIntrospector.MixInResolver) null);
      JsonSerializer<?> jsonSerializer0 = parameterSerializerModifier0.modifySerializer((SerializationConfig) null, basicBeanDescription0, (JsonSerializer<?>) null);
      assertNull(jsonSerializer0);
  }
}
