/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 10:20:22 GMT 2019
 */

package eu.supersede.integration.api.feedback.orchestrator.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.feedback.orchestrator.types.ApiUser;
import eu.supersede.integration.api.feedback.orchestrator.types.ApiUserPermission;
import eu.supersede.integration.api.feedback.orchestrator.types.Application;
import eu.supersede.integration.api.feedback.orchestrator.types.Configuration;
import eu.supersede.integration.api.feedback.orchestrator.types.GeneralConfiguration;
import eu.supersede.integration.api.feedback.orchestrator.types.User;
import eu.supersede.integration.api.feedback.orchestrator.types.UserGroup;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.mock.java.util.MockDate;

public class ApiUserPermission_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      Application application0 = apiUserPermission0.getApplication();
      assertNull(application0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      long long0 = apiUserPermission0.getId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission((ApiUser) null, (Application) null, false);
      boolean boolean0 = apiUserPermission0.hasPermission();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      ApiUser apiUser0 = new ApiUser("YTY,n", (String) null);
      apiUser0.setId((-483L));
      apiUserPermission0.setApiUser(apiUser0);
      ApiUser apiUser1 = apiUserPermission0.getApiUser();
      assertTrue(apiUser1.isEnabled());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      ApiUserPermission apiUserPermission0 = new ApiUserPermission(apiUser0, (Application) null, true);
      apiUser0.setId(1838L);
      apiUserPermission0.getApiUser();
      assertTrue(apiUserPermission0.hasPermission());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      ApiUser apiUser0 = new ApiUser((String) null, (String) null);
      Boolean boolean0 = new Boolean("(TVTS9W{VC>7w5");
      apiUser0.setAccountNonExpired(boolean0);
      apiUserPermission0.setApiUser(apiUser0);
      ApiUser apiUser1 = apiUserPermission0.getApiUser();
      assertEquals(0L, apiUser1.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      ApiUser apiUser0 = new ApiUser("", "");
      Boolean boolean0 = new Boolean(false);
      apiUser0.setAccountNonLocked(boolean0);
      apiUserPermission0.setApiUser(apiUser0);
      ApiUser apiUser1 = apiUserPermission0.getApiUser();
      assertEquals(0L, apiUser1.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      GeneralConfiguration generalConfiguration0 = new GeneralConfiguration();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      Stack<UserGroup> stack0 = new Stack<UserGroup>();
      Application application0 = new Application("", (-2613), (Date) null, (Date) null, generalConfiguration0, (List<Configuration>) null, linkedList0, stack0);
      Boolean boolean0 = new Boolean("");
      apiUser0.setCredentialsNonExpired(boolean0);
      ApiUserPermission apiUserPermission0 = new ApiUserPermission(apiUser0, application0, true);
      apiUserPermission0.getApiUser();
      assertTrue(apiUserPermission0.hasPermission());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser();
      ApiUserPermission apiUserPermission0 = new ApiUserPermission(apiUser0, (Application) null, true);
      Boolean boolean0 = new Boolean(false);
      apiUser0.setEnabled(boolean0);
      apiUserPermission0.getApiUser();
      assertTrue(apiUserPermission0.hasPermission());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      ApiUser apiUser0 = apiUserPermission0.getApiUser();
      assertNull(apiUser0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      MockDate mockDate0 = new MockDate(1163L);
      Stack<Configuration> stack0 = new Stack<Configuration>();
      Application application0 = new Application("X", (-2988), mockDate0, mockDate0, stack0);
      application0.setId((-2988));
      apiUserPermission0.setApplication(application0);
      Application application1 = apiUserPermission0.getApplication();
      assertEquals("X", application1.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      MockDate mockDate0 = new MockDate(0, 0, (-4154));
      Vector<Configuration> vector0 = new Vector<Configuration>();
      ArrayList<User> arrayList0 = new ArrayList<User>();
      Stack<UserGroup> stack0 = new Stack<UserGroup>();
      Application application0 = new Application((String) null, 9, mockDate0, mockDate0, (GeneralConfiguration) null, vector0, arrayList0, stack0);
      application0.setId(2147483647L);
      apiUserPermission0.setApplication(application0);
      Application application1 = apiUserPermission0.getApplication();
      assertSame(application1, application0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      MockDate mockDate0 = new MockDate((-2), (-2), (-2), (-2), 415, 0);
      GeneralConfiguration generalConfiguration0 = new GeneralConfiguration();
      ArrayList<Configuration> arrayList0 = new ArrayList<Configuration>();
      Stack<User> stack0 = new Stack<User>();
      Application application0 = new Application((String) null, 415, mockDate0, mockDate0, generalConfiguration0, arrayList0, stack0);
      apiUserPermission0.setApplication(application0);
      Application application1 = apiUserPermission0.getApplication();
      assertEquals(0L, application1.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ApiUser apiUser0 = new ApiUser("", "o!w*v?2n+3xnRr,");
      MockDate mockDate0 = new MockDate();
      Stack<Configuration> stack0 = new Stack<Configuration>();
      Application application0 = new Application("", 0, mockDate0, mockDate0, stack0);
      ApiUserPermission apiUserPermission0 = new ApiUserPermission(apiUser0, application0, false);
      apiUserPermission0.getApplication();
      assertFalse(apiUserPermission0.hasPermission());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      apiUserPermission0.setId((-1467L));
      long long0 = apiUserPermission0.getId();
      assertEquals((-1467L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      apiUserPermission0.setId(3409L);
      long long0 = apiUserPermission0.getId();
      assertEquals(3409L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ApiUserPermission apiUserPermission0 = new ApiUserPermission();
      apiUserPermission0.setPermission(true);
      boolean boolean0 = apiUserPermission0.hasPermission();
      assertTrue(boolean0);
  }
}
