/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 11:04:21 GMT 2019
 */

package eu.supersede.integration.api.mdm.types;

import org.junit.Test;
import static org.junit.Assert.*;
import eu.supersede.integration.api.mdm.types.ActionParameter;
import eu.supersede.integration.api.mdm.types.ActionTypes;
import eu.supersede.integration.api.mdm.types.CER_Rule;
import eu.supersede.integration.api.mdm.types.Event;
import eu.supersede.integration.api.mdm.types.Filter;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

public class CER_Rule_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      int int0 = cER_Rule0.getWindowTime();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      int int0 = cER_Rule0.getWindowSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      ActionTypes actionTypes0 = ActionTypes.ALERT_MONITOR_NON_DETERMINISTIC_RECONFIGURATION;
      cER_Rule0.setAction(actionTypes0);
      ActionTypes actionTypes1 = cER_Rule0.getAction();
      assertEquals(ActionTypes.ALERT_MONITOR_NON_DETERMINISTIC_RECONFIGURATION, actionTypes1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      String string0 = cER_Rule0.getRuleName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      String string0 = cER_Rule0.getCer_ruleID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      cER_Rule0.setWindowSize((-626));
      int int0 = cER_Rule0.getWindowSize();
      assertEquals((-626), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      cER_Rule0.setCer_ruleID("!=>f~%OY~NHZ0");
      String string0 = cER_Rule0.getCer_ruleID();
      assertEquals("!=>f~%OY~NHZ0", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      cER_Rule0.getAction();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      List<Event> list0 = cER_Rule0.getPatterns();
      List<Event> list1 = cER_Rule0.getPatterns();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      List<Filter> list0 = cER_Rule0.getFilters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      cER_Rule0.getActionParameters();
      List<ActionParameter> list0 = cER_Rule0.getActionParameters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      ArrayList<ActionParameter> arrayList0 = new ArrayList<ActionParameter>();
      cER_Rule0.setActionParameters(arrayList0);
      ActionParameter actionParameter0 = new ActionParameter();
      arrayList0.add(actionParameter0);
      List<ActionParameter> list0 = cER_Rule0.getActionParameters();
      assertTrue(list0.contains(actionParameter0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      cER_Rule0.setCer_ruleID("");
      String string0 = cER_Rule0.getCer_ruleID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      Vector<Filter> vector0 = new Vector<Filter>();
      Filter filter0 = new Filter();
      vector0.insertElementAt(filter0, 0);
      cER_Rule0.setFilters(vector0);
      List<Filter> list0 = cER_Rule0.getFilters();
      assertTrue(list0.contains(filter0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      Vector<Event> vector0 = new Vector<Event>();
      cER_Rule0.setPatterns(vector0);
      Event event0 = new Event();
      vector0.add(event0);
      List<Event> list0 = cER_Rule0.getPatterns();
      assertTrue(list0.contains(event0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      cER_Rule0.setRuleName("");
      String string0 = cER_Rule0.getRuleName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      cER_Rule0.setRuleName("com.google.common.base.Functions$ToStringFunction");
      String string0 = cER_Rule0.getRuleName();
      assertEquals("com.google.common.base.Functions$ToStringFunction", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      cER_Rule0.setWindowSize(1702);
      int int0 = cER_Rule0.getWindowSize();
      assertEquals(1702, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      cER_Rule0.setWindowTime((-1040));
      int int0 = cER_Rule0.getWindowTime();
      assertEquals((-1040), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CER_Rule cER_Rule0 = new CER_Rule();
      cER_Rule0.setWindowTime(1702);
      int int0 = cER_Rule0.getWindowTime();
      assertEquals(1702, int0);
  }
}
